{
  "version": 3,
  "sources": ["../../react-fast-compare/index.js", "../../deepmerge/dist/es.js", "../../formik/src/FormikContext.tsx", "../../formik/src/utils.ts", "../../formik/src/Formik.tsx", "../../formik/src/Field.tsx", "../../formik/src/Form.tsx", "../../formik/src/withFormik.tsx", "../../formik/src/connect.tsx", "../../formik/src/FieldArray.tsx", "../../formik/src/ErrorMessage.tsx", "../../formik/src/FastField.tsx"],
  "sourcesContent": ["'use strict';\n\nvar isArray = Array.isArray;\nvar keyList = Object.keys;\nvar hasProp = Object.prototype.hasOwnProperty;\nvar hasElementType = typeof Element !== 'undefined';\n\nfunction equal(a, b) {\n  // fast-deep-equal index.js 2.0.1\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    var arrA = isArray(a)\n      , arrB = isArray(b)\n      , i\n      , length\n      , key;\n\n    if (arrA && arrB) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n    if (arrA != arrB) return false;\n\n    var dateA = a instanceof Date\n      , dateB = b instanceof Date;\n    if (dateA != dateB) return false;\n    if (dateA && dateB) return a.getTime() == b.getTime();\n\n    var regexpA = a instanceof RegExp\n      , regexpB = b instanceof RegExp;\n    if (regexpA != regexpB) return false;\n    if (regexpA && regexpB) return a.toString() == b.toString();\n\n    var keys = keyList(a);\n    length = keys.length;\n\n    if (length !== keyList(b).length)\n      return false;\n\n    for (i = length; i-- !== 0;)\n      if (!hasProp.call(b, keys[i])) return false;\n    // end fast-deep-equal\n\n    // start react-fast-compare\n    // custom handling for DOM elements\n    if (hasElementType && a instanceof Element && b instanceof Element)\n      return a === b;\n\n    // custom handling for React\n    for (i = length; i-- !== 0;) {\n      key = keys[i];\n      if (key === '_owner' && a.$$typeof) {\n        // React-specific: avoid traversing React elements' _owner.\n        //  _owner contains circular references\n        // and is not needed when comparing the actual elements (and not their owners)\n        // .$$typeof and ._store on just reasonable markers of a react element\n        continue;\n      } else {\n        // all other properties should be traversed as usual\n        if (!equal(a[key], b[key])) return false;\n      }\n    }\n    // end react-fast-compare\n\n    // fast-deep-equal index.js 2.0.1\n    return true;\n  }\n\n  return a !== a && b !== b;\n}\n// end fast-deep-equal\n\nmodule.exports = function exportedEqual(a, b) {\n  try {\n    return equal(a, b);\n  } catch (error) {\n    if ((error.message && error.message.match(/stack|recursion/i)) || (error.number === -2146828260)) {\n      // warn on circular references, don't crash\n      // browsers give this different errors name and messages:\n      // chrome/safari: \"RangeError\", \"Maximum call stack size exceeded\"\n      // firefox: \"InternalError\", too much recursion\"\n      // edge: \"Error\", \"Out of stack space\"\n      console.warn('Warning: react-fast-compare does not handle circular references.', error.name, error.message);\n      return false;\n    }\n    // some other error. we should definitely know about these\n    throw error;\n  }\n};\n", "var isMergeableObject = function isMergeableObject(value) {\n\treturn isNonNullObject(value)\n\t\t&& !isSpecial(value)\n};\n\nfunction isNonNullObject(value) {\n\treturn !!value && typeof value === 'object'\n}\n\nfunction isSpecial(value) {\n\tvar stringValue = Object.prototype.toString.call(value);\n\n\treturn stringValue === '[object RegExp]'\n\t\t|| stringValue === '[object Date]'\n\t\t|| isReactElement(value)\n}\n\n// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25\nvar canUseSymbol = typeof Symbol === 'function' && Symbol.for;\nvar REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;\n\nfunction isReactElement(value) {\n\treturn value.$$typeof === REACT_ELEMENT_TYPE\n}\n\nfunction emptyTarget(val) {\n\treturn Array.isArray(val) ? [] : {}\n}\n\nfunction cloneUnlessOtherwiseSpecified(value, options) {\n\treturn (options.clone !== false && options.isMergeableObject(value))\n\t\t? deepmerge(emptyTarget(value), value, options)\n\t\t: value\n}\n\nfunction defaultArrayMerge(target, source, options) {\n\treturn target.concat(source).map(function(element) {\n\t\treturn cloneUnlessOtherwiseSpecified(element, options)\n\t})\n}\n\nfunction mergeObject(target, source, options) {\n\tvar destination = {};\n\tif (options.isMergeableObject(target)) {\n\t\tObject.keys(target).forEach(function(key) {\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(target[key], options);\n\t\t});\n\t}\n\tObject.keys(source).forEach(function(key) {\n\t\tif (!options.isMergeableObject(source[key]) || !target[key]) {\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(source[key], options);\n\t\t} else {\n\t\t\tdestination[key] = deepmerge(target[key], source[key], options);\n\t\t}\n\t});\n\treturn destination\n}\n\nfunction deepmerge(target, source, options) {\n\toptions = options || {};\n\toptions.arrayMerge = options.arrayMerge || defaultArrayMerge;\n\toptions.isMergeableObject = options.isMergeableObject || isMergeableObject;\n\n\tvar sourceIsArray = Array.isArray(source);\n\tvar targetIsArray = Array.isArray(target);\n\tvar sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;\n\n\tif (!sourceAndTargetTypesMatch) {\n\t\treturn cloneUnlessOtherwiseSpecified(source, options)\n\t} else if (sourceIsArray) {\n\t\treturn options.arrayMerge(target, source, options)\n\t} else {\n\t\treturn mergeObject(target, source, options)\n\t}\n}\n\ndeepmerge.all = function deepmergeAll(array, options) {\n\tif (!Array.isArray(array)) {\n\t\tthrow new Error('first argument should be an array')\n\t}\n\n\treturn array.reduce(function(prev, next) {\n\t\treturn deepmerge(prev, next, options)\n\t}, {})\n};\n\nvar deepmerge_1 = deepmerge;\n\nexport default deepmerge_1;\n", "import * as React from 'react';\nimport { FormikContextType } from './types';\nimport invariant from 'tiny-warning';\n\nexport const FormikContext = React.createContext<FormikContextType<any>>(\n  undefined as any\n);\nFormikContext.displayName = 'FormikContext';\n\nexport const FormikProvider = FormikContext.Provider;\nexport const FormikConsumer = FormikContext.Consumer;\n\nexport function useFormikContext<Values>() {\n  const formik = React.useContext<FormikContextType<Values>>(FormikContext);\n\n  invariant(\n    !!formik,\n    `Formik context is undefined, please verify you are calling useFormikContext() as child of a <Formik> component.`\n  );\n\n  return formik;\n}\n", "import clone from 'lodash/clone';\nimport toPath from 'lodash/toPath';\nimport * as React from 'react';\n\n// Assertions\n\n/** @private is the value an empty array? */\nexport const isEmptyArray = (value?: any) =>\n  Array.isArray(value) && value.length === 0;\n\n/** @private is the given object a Function? */\nexport const isFunction = (obj: any): obj is Function =>\n  typeof obj === 'function';\n\n/** @private is the given object an Object? */\nexport const isObject = (obj: any): obj is Object =>\n  obj !== null && typeof obj === 'object';\n\n/** @private is the given object an integer? */\nexport const isInteger = (obj: any): boolean =>\n  String(Math.floor(Number(obj))) === obj;\n\n/** @private is the given object a string? */\nexport const isString = (obj: any): obj is string =>\n  Object.prototype.toString.call(obj) === '[object String]';\n\n/** @private is the given object a NaN? */\n// eslint-disable-next-line no-self-compare\nexport const isNaN = (obj: any): boolean => obj !== obj;\n\n/** @private Does a React component have exactly 0 children? */\nexport const isEmptyChildren = (children: any): boolean =>\n  React.Children.count(children) === 0;\n\n/** @private is the given object/value a promise? */\nexport const isPromise = (value: any): value is PromiseLike<any> =>\n  isObject(value) && isFunction(value.then);\n\n/** @private is the given object/value a type of synthetic event? */\nexport const isInputEvent = (value: any): value is React.SyntheticEvent<any> =>\n  value && isObject(value) && isObject(value.target);\n\n/**\n * Same as document.activeElement but wraps in a try-catch block. In IE it is\n * not safe to call document.activeElement if there is nothing focused.\n *\n * The activeElement will be null only if the document or document body is not\n * yet defined.\n *\n * @param {?Document} doc Defaults to current document.\n * @return {Element | null}\n * @see https://github.com/facebook/fbjs/blob/master/packages/fbjs/src/core/dom/getActiveElement.js\n */\nexport function getActiveElement(doc?: Document): Element | null {\n  doc = doc || (typeof document !== 'undefined' ? document : undefined);\n  if (typeof doc === 'undefined') {\n    return null;\n  }\n  try {\n    return doc.activeElement || doc.body;\n  } catch (e) {\n    return doc.body;\n  }\n}\n\n/**\n * Deeply get a value from an object via its path.\n */\nexport function getIn(\n  obj: any,\n  key: string | string[],\n  def?: any,\n  p: number = 0\n) {\n  const path = toPath(key);\n  while (obj && p < path.length) {\n    obj = obj[path[p++]];\n  }\n\n  // check if path is not in the end\n  if (p !== path.length && !obj) {\n    return def;\n  }\n\n  return obj === undefined ? def : obj;\n}\n\n/**\n * Deeply set a value from in object via it's path. If the value at `path`\n * has changed, return a shallow copy of obj with `value` set at `path`.\n * If `value` has not changed, return the original `obj`.\n *\n * Existing objects / arrays along `path` are also shallow copied. Sibling\n * objects along path retain the same internal js reference. Since new\n * objects / arrays are only created along `path`, we can test if anything\n * changed in a nested structure by comparing the object's reference in\n * the old and new object, similar to how russian doll cache invalidation\n * works.\n *\n * In earlier versions of this function, which used cloneDeep, there were\n * issues whereby settings a nested value would mutate the parent\n * instead of creating a new object. `clone` avoids that bug making a\n * shallow copy of the objects along the update path\n * so no object is mutated in place.\n *\n * Before changing this function, please read through the following\n * discussions.\n *\n * @see https://github.com/developit/linkstate\n * @see https://github.com/jaredpalmer/formik/pull/123\n */\nexport function setIn(obj: any, path: string, value: any): any {\n  let res: any = clone(obj); // this keeps inheritance when obj is a class\n  let resVal: any = res;\n  let i = 0;\n  let pathArray = toPath(path);\n\n  for (; i < pathArray.length - 1; i++) {\n    const currentPath: string = pathArray[i];\n    let currentObj: any = getIn(obj, pathArray.slice(0, i + 1));\n\n    if (currentObj && (isObject(currentObj) || Array.isArray(currentObj))) {\n      resVal = resVal[currentPath] = clone(currentObj);\n    } else {\n      const nextPath: string = pathArray[i + 1];\n      resVal = resVal[currentPath] =\n        isInteger(nextPath) && Number(nextPath) >= 0 ? [] : {};\n    }\n  }\n\n  // Return original object if new value is the same as current\n  if ((i === 0 ? obj : resVal)[pathArray[i]] === value) {\n    return obj;\n  }\n\n  if (value === undefined) {\n    delete resVal[pathArray[i]];\n  } else {\n    resVal[pathArray[i]] = value;\n  }\n\n  // If the path array has a single element, the loop did not run.\n  // Deleting on `resVal` had no effect in this scenario, so we delete on the result instead.\n  if (i === 0 && value === undefined) {\n    delete res[pathArray[i]];\n  }\n\n  return res;\n}\n\n/**\n * Recursively a set the same value for all keys and arrays nested object, cloning\n * @param object\n * @param value\n * @param visited\n * @param response\n */\nexport function setNestedObjectValues<T>(\n  object: any,\n  value: any,\n  visited: any = new WeakMap(),\n  response: any = {}\n): T {\n  for (let k of Object.keys(object)) {\n    const val = object[k];\n    if (isObject(val)) {\n      if (!visited.get(val)) {\n        visited.set(val, true);\n        // In order to keep array values consistent for both dot path  and\n        // bracket syntax, we need to check if this is an array so that\n        // this will output  { friends: [true] } and not { friends: { \"0\": true } }\n        response[k] = Array.isArray(val) ? [] : {};\n        setNestedObjectValues(val, value, visited, response[k]);\n      }\n    } else {\n      response[k] = value;\n    }\n  }\n\n  return response;\n}\n", "import deepmerge from 'deepmerge';\nimport isPlainObject from 'lodash/isPlainObject';\nimport * as React from 'react';\nimport isEqual from 'react-fast-compare';\nimport invariant from 'tiny-warning';\nimport { FieldConfig } from './Field';\nimport { FormikProvider } from './FormikContext';\nimport {\n  FieldHelperProps,\n  FieldInputProps,\n  FieldMetaProps,\n  FormikConfig,\n  FormikErrors,\n  FormikHandlers,\n  FormikHelpers,\n  FormikProps,\n  FormikState,\n  FormikTouched,\n  FormikValues,\n} from './types';\nimport {\n  getActiveElement,\n  getIn,\n  isEmptyChildren,\n  isFunction,\n  isObject,\n  isPromise,\n  isString,\n  setIn,\n  setNestedObjectValues,\n} from './utils';\n\ntype FormikMessage<Values> =\n  | { type: 'SUBMIT_ATTEMPT' }\n  | { type: 'SUBMIT_FAILURE' }\n  | { type: 'SUBMIT_SUCCESS' }\n  | { type: 'SET_ISVALIDATING'; payload: boolean }\n  | { type: 'SET_ISSUBMITTING'; payload: boolean }\n  | { type: 'SET_VALUES'; payload: Values }\n  | { type: 'SET_FIELD_VALUE'; payload: { field: string; value?: any } }\n  | { type: 'SET_FIELD_TOUCHED'; payload: { field: string; value?: boolean } }\n  | { type: 'SET_FIELD_ERROR'; payload: { field: string; value?: string } }\n  | { type: 'SET_TOUCHED'; payload: FormikTouched<Values> }\n  | { type: 'SET_ERRORS'; payload: FormikErrors<Values> }\n  | { type: 'SET_STATUS'; payload: any }\n  | {\n      type: 'SET_FORMIK_STATE';\n      payload: (s: FormikState<Values>) => FormikState<Values>;\n    }\n  | {\n      type: 'RESET_FORM';\n      payload: FormikState<Values>;\n    };\n\n// State reducer\nfunction formikReducer<Values>(\n  state: FormikState<Values>,\n  msg: FormikMessage<Values>\n) {\n  switch (msg.type) {\n    case 'SET_VALUES':\n      return { ...state, values: msg.payload };\n    case 'SET_TOUCHED':\n      return { ...state, touched: msg.payload };\n    case 'SET_ERRORS':\n      if (isEqual(state.errors, msg.payload)) {\n        return state;\n      }\n\n      return { ...state, errors: msg.payload };\n    case 'SET_STATUS':\n      return { ...state, status: msg.payload };\n    case 'SET_ISSUBMITTING':\n      return { ...state, isSubmitting: msg.payload };\n    case 'SET_ISVALIDATING':\n      return { ...state, isValidating: msg.payload };\n    case 'SET_FIELD_VALUE':\n      return {\n        ...state,\n        values: setIn(state.values, msg.payload.field, msg.payload.value),\n      };\n    case 'SET_FIELD_TOUCHED':\n      return {\n        ...state,\n        touched: setIn(state.touched, msg.payload.field, msg.payload.value),\n      };\n    case 'SET_FIELD_ERROR':\n      return {\n        ...state,\n        errors: setIn(state.errors, msg.payload.field, msg.payload.value),\n      };\n    case 'RESET_FORM':\n      return { ...state, ...msg.payload };\n    case 'SET_FORMIK_STATE':\n      return msg.payload(state);\n    case 'SUBMIT_ATTEMPT':\n      return {\n        ...state,\n        touched: setNestedObjectValues<FormikTouched<Values>>(\n          state.values,\n          true\n        ),\n        isSubmitting: true,\n        submitCount: state.submitCount + 1,\n      };\n    case 'SUBMIT_FAILURE':\n      return {\n        ...state,\n        isSubmitting: false,\n      };\n    case 'SUBMIT_SUCCESS':\n      return {\n        ...state,\n        isSubmitting: false,\n      };\n    default:\n      return state;\n  }\n}\n\n// Initial empty states // objects\nconst emptyErrors: FormikErrors<unknown> = {};\nconst emptyTouched: FormikTouched<unknown> = {};\n\n// This is an object that contains a map of all registered fields\n// and their validate functions\ninterface FieldRegistry {\n  [field: string]: {\n    validate: (value: any) => string | Promise<string> | undefined;\n  };\n}\n\nexport function useFormik<Values extends FormikValues = FormikValues>({\n  validateOnChange = true,\n  validateOnBlur = true,\n  validateOnMount = false,\n  isInitialValid,\n  enableReinitialize = false,\n  onSubmit,\n  ...rest\n}: FormikConfig<Values>) {\n  const props = {\n    validateOnChange,\n    validateOnBlur,\n    validateOnMount,\n    onSubmit,\n    ...rest,\n  };\n  const initialValues = React.useRef(props.initialValues);\n  const initialErrors = React.useRef(props.initialErrors || emptyErrors);\n  const initialTouched = React.useRef(props.initialTouched || emptyTouched);\n  const initialStatus = React.useRef(props.initialStatus);\n  const isMounted = React.useRef<boolean>(false);\n  const fieldRegistry = React.useRef<FieldRegistry>({});\n  if (__DEV__) {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      invariant(\n        typeof isInitialValid === 'undefined',\n        'isInitialValid has been deprecated and will be removed in future versions of Formik. Please use initialErrors or validateOnMount instead.'\n      );\n      // eslint-disable-next-line\n    }, []);\n  }\n\n  React.useEffect(() => {\n    isMounted.current = true;\n\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n\n  const [, setIteration] = React.useState(0);\n  const stateRef = React.useRef<FormikState<Values>>({\n    values: props.initialValues,\n    errors: props.initialErrors || emptyErrors,\n    touched: props.initialTouched || emptyTouched,\n    status: props.initialStatus,\n    isSubmitting: false,\n    isValidating: false,\n    submitCount: 0,\n  });\n\n  const state = stateRef.current;\n\n  const dispatch = React.useCallback((action: FormikMessage<Values>) => {\n    const prev = stateRef.current;\n\n    stateRef.current = formikReducer(prev, action);\n\n    // force rerender\n    if (prev !== stateRef.current) setIteration(x => x + 1);\n  }, []);\n\n  const runValidateHandler = React.useCallback(\n    (values: Values, field?: string): Promise<FormikErrors<Values>> => {\n      return new Promise((resolve, reject) => {\n        const maybePromisedErrors = (props.validate as any)(values, field);\n        if (maybePromisedErrors == null) {\n          // use loose null check here on purpose\n          resolve(emptyErrors);\n        } else if (isPromise(maybePromisedErrors)) {\n          (maybePromisedErrors as Promise<any>).then(\n            errors => {\n              resolve(errors || emptyErrors);\n            },\n            actualException => {\n              if (process.env.NODE_ENV !== 'production') {\n                console.warn(\n                  `Warning: An unhandled error was caught during validation in <Formik validate />`,\n                  actualException\n                );\n              }\n\n              reject(actualException);\n            }\n          );\n        } else {\n          resolve(maybePromisedErrors);\n        }\n      });\n    },\n    [props.validate]\n  );\n\n  /**\n   * Run validation against a Yup schema and optionally run a function if successful\n   */\n  const runValidationSchema = React.useCallback(\n    (values: Values, field?: string): Promise<FormikErrors<Values>> => {\n      const validationSchema = props.validationSchema;\n      const schema = isFunction(validationSchema)\n        ? validationSchema(field)\n        : validationSchema;\n      const promise =\n        field && schema.validateAt\n          ? schema.validateAt(field, values)\n          : validateYupSchema(values, schema);\n      return new Promise((resolve, reject) => {\n        promise.then(\n          () => {\n            resolve(emptyErrors);\n          },\n          (err: any) => {\n            // Yup will throw a validation error if validation fails. We catch those and\n            // resolve them into Formik errors. We can sniff if something is a Yup error\n            // by checking error.name.\n            // @see https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\n            if (err.name === 'ValidationError') {\n              resolve(yupToFormErrors(err));\n            } else {\n              // We throw any other errors\n              if (process.env.NODE_ENV !== 'production') {\n                console.warn(\n                  `Warning: An unhandled error was caught during validation in <Formik validationSchema />`,\n                  err\n                );\n              }\n\n              reject(err);\n            }\n          }\n        );\n      });\n    },\n    [props.validationSchema]\n  );\n\n  const runSingleFieldLevelValidation = React.useCallback(\n    (field: string, value: void | string): Promise<string> => {\n      return new Promise(resolve =>\n        resolve(fieldRegistry.current[field].validate(value) as string)\n      );\n    },\n    []\n  );\n\n  const runFieldLevelValidations = React.useCallback(\n    (values: Values): Promise<FormikErrors<Values>> => {\n      const fieldKeysWithValidation: string[] = Object.keys(\n        fieldRegistry.current\n      ).filter(f => isFunction(fieldRegistry.current[f].validate));\n\n      // Construct an array with all of the field validation functions\n      const fieldValidations: Promise<string>[] =\n        fieldKeysWithValidation.length > 0\n          ? fieldKeysWithValidation.map(f =>\n              runSingleFieldLevelValidation(f, getIn(values, f))\n            )\n          : [Promise.resolve('DO_NOT_DELETE_YOU_WILL_BE_FIRED')]; // use special case ;)\n\n      return Promise.all(fieldValidations).then((fieldErrorsList: string[]) =>\n        fieldErrorsList.reduce((prev, curr, index) => {\n          if (curr === 'DO_NOT_DELETE_YOU_WILL_BE_FIRED') {\n            return prev;\n          }\n          if (curr) {\n            prev = setIn(prev, fieldKeysWithValidation[index], curr);\n          }\n          return prev;\n        }, {})\n      );\n    },\n    [runSingleFieldLevelValidation]\n  );\n\n  // Run all validations and return the result\n  const runAllValidations = React.useCallback(\n    (values: Values) => {\n      return Promise.all([\n        runFieldLevelValidations(values),\n        props.validationSchema ? runValidationSchema(values) : {},\n        props.validate ? runValidateHandler(values) : {},\n      ]).then(([fieldErrors, schemaErrors, validateErrors]) => {\n        const combinedErrors = deepmerge.all<FormikErrors<Values>>(\n          [fieldErrors, schemaErrors, validateErrors],\n          { arrayMerge }\n        );\n        return combinedErrors;\n      });\n    },\n    [\n      props.validate,\n      props.validationSchema,\n      runFieldLevelValidations,\n      runValidateHandler,\n      runValidationSchema,\n    ]\n  );\n\n  // Run all validations methods and update state accordingly\n  const validateFormWithHighPriority = useEventCallback(\n    (values: Values = state.values) => {\n      dispatch({ type: 'SET_ISVALIDATING', payload: true });\n      return runAllValidations(values).then(combinedErrors => {\n        if (!!isMounted.current) {\n          dispatch({ type: 'SET_ISVALIDATING', payload: false });\n          dispatch({ type: 'SET_ERRORS', payload: combinedErrors });\n        }\n        return combinedErrors;\n      });\n    }\n  );\n\n  React.useEffect(() => {\n    if (\n      validateOnMount &&\n      isMounted.current === true &&\n      isEqual(initialValues.current, props.initialValues)\n    ) {\n      validateFormWithHighPriority(initialValues.current);\n    }\n  }, [validateOnMount, validateFormWithHighPriority]);\n\n  const resetForm = React.useCallback(\n    (nextState?: Partial<FormikState<Values>>) => {\n      const values =\n        nextState && nextState.values\n          ? nextState.values\n          : initialValues.current;\n      const errors =\n        nextState && nextState.errors\n          ? nextState.errors\n          : initialErrors.current\n          ? initialErrors.current\n          : props.initialErrors || {};\n      const touched =\n        nextState && nextState.touched\n          ? nextState.touched\n          : initialTouched.current\n          ? initialTouched.current\n          : props.initialTouched || {};\n      const status =\n        nextState && nextState.status\n          ? nextState.status\n          : initialStatus.current\n          ? initialStatus.current\n          : props.initialStatus;\n      initialValues.current = values;\n      initialErrors.current = errors;\n      initialTouched.current = touched;\n      initialStatus.current = status;\n\n      const dispatchFn = () => {\n        dispatch({\n          type: 'RESET_FORM',\n          payload: {\n            isSubmitting: !!nextState && !!nextState.isSubmitting,\n            errors,\n            touched,\n            status,\n            values,\n            isValidating: !!nextState && !!nextState.isValidating,\n            submitCount:\n              !!nextState &&\n              !!nextState.submitCount &&\n              typeof nextState.submitCount === 'number'\n                ? nextState.submitCount\n                : 0,\n          },\n        });\n      };\n\n      if (props.onReset) {\n        const maybePromisedOnReset = (props.onReset as any)(\n          state.values,\n          imperativeMethods\n        );\n\n        if (isPromise(maybePromisedOnReset)) {\n          (maybePromisedOnReset as Promise<any>).then(dispatchFn);\n        } else {\n          dispatchFn();\n        }\n      } else {\n        dispatchFn();\n      }\n    },\n    [props.initialErrors, props.initialStatus, props.initialTouched, props.onReset]\n  );\n\n  React.useEffect(() => {\n    if (\n      isMounted.current === true &&\n      !isEqual(initialValues.current, props.initialValues)\n    ) {\n      if (enableReinitialize) {\n        initialValues.current = props.initialValues;\n        resetForm();\n        if (validateOnMount) {\n          validateFormWithHighPriority(initialValues.current);\n        }\n      }\n    }\n  }, [\n    enableReinitialize,\n    props.initialValues,\n    resetForm,\n    validateOnMount,\n    validateFormWithHighPriority,\n  ]);\n\n  React.useEffect(() => {\n    if (\n      enableReinitialize &&\n      isMounted.current === true &&\n      !isEqual(initialErrors.current, props.initialErrors)\n    ) {\n      initialErrors.current = props.initialErrors || emptyErrors;\n      dispatch({\n        type: 'SET_ERRORS',\n        payload: props.initialErrors || emptyErrors,\n      });\n    }\n  }, [enableReinitialize, props.initialErrors]);\n\n  React.useEffect(() => {\n    if (\n      enableReinitialize &&\n      isMounted.current === true &&\n      !isEqual(initialTouched.current, props.initialTouched)\n    ) {\n      initialTouched.current = props.initialTouched || emptyTouched;\n      dispatch({\n        type: 'SET_TOUCHED',\n        payload: props.initialTouched || emptyTouched,\n      });\n    }\n  }, [enableReinitialize, props.initialTouched]);\n\n  React.useEffect(() => {\n    if (\n      enableReinitialize &&\n      isMounted.current === true &&\n      !isEqual(initialStatus.current, props.initialStatus)\n    ) {\n      initialStatus.current = props.initialStatus;\n      dispatch({\n        type: 'SET_STATUS',\n        payload: props.initialStatus,\n      });\n    }\n  }, [enableReinitialize, props.initialStatus, props.initialTouched]);\n\n  const validateField = useEventCallback((name: string) => {\n    // This will efficiently validate a single field by avoiding state\n    // changes if the validation function is synchronous. It's different from\n    // what is called when using validateForm.\n\n    if (\n      fieldRegistry.current[name] &&\n      isFunction(fieldRegistry.current[name].validate)\n    ) {\n      const value = getIn(state.values, name);\n      const maybePromise = fieldRegistry.current[name].validate(value);\n      if (isPromise(maybePromise)) {\n        // Only flip isValidating if the function is async.\n        dispatch({ type: 'SET_ISVALIDATING', payload: true });\n        return maybePromise\n          .then((x: any) => x)\n          .then((error: string) => {\n            dispatch({\n              type: 'SET_FIELD_ERROR',\n              payload: { field: name, value: error },\n            });\n            dispatch({ type: 'SET_ISVALIDATING', payload: false });\n          });\n      } else {\n        dispatch({\n          type: 'SET_FIELD_ERROR',\n          payload: {\n            field: name,\n            value: maybePromise as string | undefined,\n          },\n        });\n        return Promise.resolve(maybePromise as string | undefined);\n      }\n    } else if (props.validationSchema) {\n      dispatch({ type: 'SET_ISVALIDATING', payload: true });\n      return runValidationSchema(state.values, name)\n        .then((x: any) => x)\n        .then((error: any) => {\n          dispatch({\n            type: 'SET_FIELD_ERROR',\n            payload: { field: name, value: getIn(error, name) },\n          });\n          dispatch({ type: 'SET_ISVALIDATING', payload: false });\n        });\n    }\n\n    return Promise.resolve();\n  });\n\n  const registerField = React.useCallback((name: string, { validate }: any) => {\n    fieldRegistry.current[name] = {\n      validate,\n    };\n  }, []);\n\n  const unregisterField = React.useCallback((name: string) => {\n    delete fieldRegistry.current[name];\n  }, []);\n\n  const setTouched = useEventCallback(\n    (touched: FormikTouched<Values>, shouldValidate?: boolean) => {\n      dispatch({ type: 'SET_TOUCHED', payload: touched });\n      const willValidate =\n        shouldValidate === undefined ? validateOnBlur : shouldValidate;\n      return willValidate\n        ? validateFormWithHighPriority(state.values)\n        : Promise.resolve();\n    }\n  );\n\n  const setErrors = React.useCallback((errors: FormikErrors<Values>) => {\n    dispatch({ type: 'SET_ERRORS', payload: errors });\n  }, []);\n\n  const setValues = useEventCallback(\n    (values: React.SetStateAction<Values>, shouldValidate?: boolean) => {\n      const resolvedValues = isFunction(values) ? values(state.values) : values;\n\n      dispatch({ type: 'SET_VALUES', payload: resolvedValues });\n      const willValidate =\n        shouldValidate === undefined ? validateOnChange : shouldValidate;\n      return willValidate\n        ? validateFormWithHighPriority(resolvedValues)\n        : Promise.resolve();\n    }\n  );\n\n  const setFieldError = React.useCallback(\n    (field: string, value: string | undefined) => {\n      dispatch({\n        type: 'SET_FIELD_ERROR',\n        payload: { field, value },\n      });\n    },\n    []\n  );\n\n  const setFieldValue = useEventCallback(\n    (field: string, value: any, shouldValidate?: boolean) => {\n      dispatch({\n        type: 'SET_FIELD_VALUE',\n        payload: {\n          field,\n          value,\n        },\n      });\n      const willValidate =\n        shouldValidate === undefined ? validateOnChange : shouldValidate;\n      return willValidate\n        ? validateFormWithHighPriority(setIn(state.values, field, value))\n        : Promise.resolve();\n    }\n  );\n\n  const executeChange = React.useCallback(\n    (eventOrTextValue: string | React.ChangeEvent<any>, maybePath?: string) => {\n      // By default, assume that the first argument is a string. This allows us to use\n      // handleChange with React Native and React Native Web's onChangeText prop which\n      // provides just the value of the input.\n      let field = maybePath;\n      let val = eventOrTextValue;\n      let parsed;\n      // If the first argument is not a string though, it has to be a synthetic React Event (or a fake one),\n      // so we handle like we would a normal HTML change event.\n      if (!isString(eventOrTextValue)) {\n        // If we can, persist the event\n        // @see https://reactjs.org/docs/events.html#event-pooling\n        if ((eventOrTextValue as any).persist) {\n          (eventOrTextValue as React.ChangeEvent<any>).persist();\n        }\n        const target = eventOrTextValue.target\n          ? (eventOrTextValue as React.ChangeEvent<any>).target\n          : (eventOrTextValue as React.ChangeEvent<any>).currentTarget;\n\n        const {\n          type,\n          name,\n          id,\n          value,\n          checked,\n          outerHTML,\n          options,\n          multiple,\n        } = target;\n\n        field = maybePath ? maybePath : name ? name : id;\n        if (!field && __DEV__) {\n          warnAboutMissingIdentifier({\n            htmlContent: outerHTML,\n            documentationAnchorLink: 'handlechange-e-reactchangeeventany--void',\n            handlerName: 'handleChange',\n          });\n        }\n        val = /number|range/.test(type)\n          ? ((parsed = parseFloat(value)), isNaN(parsed) ? '' : parsed)\n          : /checkbox/.test(type) // checkboxes\n          ? getValueForCheckbox(getIn(state.values, field!), checked, value)\n          : options && multiple // <select multiple>\n          ? getSelectedValues(options)\n          : value;\n      }\n\n      if (field) {\n        // Set form fields by name\n        setFieldValue(field, val);\n      }\n    },\n    [setFieldValue, state.values]\n  );\n\n  const handleChange = useEventCallback<FormikHandlers['handleChange']>(\n    (\n      eventOrPath: string | React.ChangeEvent<any>\n    ): void | ((eventOrTextValue: string | React.ChangeEvent<any>) => void) => {\n      if (isString(eventOrPath)) {\n        return event => executeChange(event, eventOrPath);\n      } else {\n        executeChange(eventOrPath);\n      }\n    }\n  );\n\n  const setFieldTouched = useEventCallback(\n    (field: string, touched: boolean = true, shouldValidate?: boolean) => {\n      dispatch({\n        type: 'SET_FIELD_TOUCHED',\n        payload: {\n          field,\n          value: touched,\n        },\n      });\n      const willValidate =\n        shouldValidate === undefined ? validateOnBlur : shouldValidate;\n      return willValidate\n        ? validateFormWithHighPriority(state.values)\n        : Promise.resolve();\n    }\n  );\n\n  const executeBlur = React.useCallback(\n    (e: any, path?: string) => {\n      if (e.persist) {\n        e.persist();\n      }\n      const { name, id, outerHTML } = e.target;\n      const field = path ? path : name ? name : id;\n\n      if (!field && __DEV__) {\n        warnAboutMissingIdentifier({\n          htmlContent: outerHTML,\n          documentationAnchorLink: 'handleblur-e-any--void',\n          handlerName: 'handleBlur',\n        });\n      }\n\n      setFieldTouched(field, true);\n    },\n    [setFieldTouched]\n  );\n\n  const handleBlur = useEventCallback<FormikHandlers['handleBlur']>(\n    (eventOrString: any): void | ((e: any) => void) => {\n      if (isString(eventOrString)) {\n        return event => executeBlur(event, eventOrString);\n      } else {\n        executeBlur(eventOrString);\n      }\n    }\n  );\n\n  const setFormikState = React.useCallback(\n    (\n      stateOrCb:\n        | FormikState<Values>\n        | ((state: FormikState<Values>) => FormikState<Values>)\n    ): void => {\n      if (isFunction(stateOrCb)) {\n        dispatch({ type: 'SET_FORMIK_STATE', payload: stateOrCb });\n      } else {\n        dispatch({ type: 'SET_FORMIK_STATE', payload: () => stateOrCb });\n      }\n    },\n    []\n  );\n\n  const setStatus = React.useCallback((status: any) => {\n    dispatch({ type: 'SET_STATUS', payload: status });\n  }, []);\n\n  const setSubmitting = React.useCallback((isSubmitting: boolean) => {\n    dispatch({ type: 'SET_ISSUBMITTING', payload: isSubmitting });\n  }, []);\n\n  const submitForm = useEventCallback(() => {\n    dispatch({ type: 'SUBMIT_ATTEMPT' });\n    return validateFormWithHighPriority().then(\n      (combinedErrors: FormikErrors<Values>) => {\n        // In case an error was thrown and passed to the resolved Promise,\n        // `combinedErrors` can be an instance of an Error. We need to check\n        // that and abort the submit.\n        // If we don't do that, calling `Object.keys(new Error())` yields an\n        // empty array, which causes the validation to pass and the form\n        // to be submitted.\n\n        const isInstanceOfError = combinedErrors instanceof Error;\n        const isActuallyValid =\n          !isInstanceOfError && Object.keys(combinedErrors).length === 0;\n        if (isActuallyValid) {\n          // Proceed with submit...\n          //\n          // To respect sync submit fns, we can't simply wrap executeSubmit in a promise and\n          // _always_ dispatch SUBMIT_SUCCESS because isSubmitting would then always be false.\n          // This would be fine in simple cases, but make it impossible to disable submit\n          // buttons where people use callbacks or promises as side effects (which is basically\n          // all of v1 Formik code). Instead, recall that we are inside of a promise chain already,\n          //  so we can try/catch executeSubmit(), if it returns undefined, then just bail.\n          // If there are errors, throw em. Otherwise, wrap executeSubmit in a promise and handle\n          // cleanup of isSubmitting on behalf of the consumer.\n          let promiseOrUndefined;\n          try {\n            promiseOrUndefined = executeSubmit();\n            // Bail if it's sync, consumer is responsible for cleaning up\n            // via setSubmitting(false)\n            if (promiseOrUndefined === undefined) {\n              return;\n            }\n          } catch (error) {\n            throw error;\n          }\n\n          return Promise.resolve(promiseOrUndefined)\n            .then(result => {\n              if (!!isMounted.current) {\n                dispatch({ type: 'SUBMIT_SUCCESS' });\n              }\n              return result;\n            })\n            .catch(_errors => {\n              if (!!isMounted.current) {\n                dispatch({ type: 'SUBMIT_FAILURE' });\n                // This is a legit error rejected by the onSubmit fn\n                // so we don't want to break the promise chain\n                throw _errors;\n              }\n            });\n        } else if (!!isMounted.current) {\n          // ^^^ Make sure Formik is still mounted before updating state\n          dispatch({ type: 'SUBMIT_FAILURE' });\n          // throw combinedErrors;\n          if (isInstanceOfError) {\n            throw combinedErrors;\n          }\n        }\n        return;\n      }\n    );\n  });\n\n  const handleSubmit = useEventCallback(\n    (e?: React.FormEvent<HTMLFormElement>) => {\n      if (e && e.preventDefault && isFunction(e.preventDefault)) {\n        e.preventDefault();\n      }\n\n      if (e && e.stopPropagation && isFunction(e.stopPropagation)) {\n        e.stopPropagation();\n      }\n\n      // Warn if form submission is triggered by a <button> without a\n      // specified `type` attribute during development. This mitigates\n      // a common gotcha in forms with both reset and submit buttons,\n      // where the dev forgets to add type=\"button\" to the reset button.\n      if (__DEV__ && typeof document !== 'undefined') {\n        // Safely get the active element (works with IE)\n        const activeElement = getActiveElement();\n        if (\n          activeElement !== null &&\n          activeElement instanceof HTMLButtonElement\n        ) {\n          invariant(\n            activeElement.attributes &&\n              activeElement.attributes.getNamedItem('type'),\n            'You submitted a Formik form using a button with an unspecified `type` attribute.  Most browsers default button elements to `type=\"submit\"`. If this is not a submit button, please add `type=\"button\"`.'\n          );\n        }\n      }\n\n      submitForm().catch(reason => {\n        console.warn(\n          `Warning: An unhandled error was caught from submitForm()`,\n          reason\n        );\n      });\n    }\n  );\n\n  const imperativeMethods: FormikHelpers<Values> = {\n    resetForm,\n    validateForm: validateFormWithHighPriority,\n    validateField,\n    setErrors,\n    setFieldError,\n    setFieldTouched,\n    setFieldValue,\n    setStatus,\n    setSubmitting,\n    setTouched,\n    setValues,\n    setFormikState,\n    submitForm,\n  };\n\n  const executeSubmit = useEventCallback(() => {\n    return onSubmit(state.values, imperativeMethods);\n  });\n\n  const handleReset = useEventCallback(e => {\n    if (e && e.preventDefault && isFunction(e.preventDefault)) {\n      e.preventDefault();\n    }\n\n    if (e && e.stopPropagation && isFunction(e.stopPropagation)) {\n      e.stopPropagation();\n    }\n\n    resetForm();\n  });\n\n  const getFieldMeta = React.useCallback(\n    (name: string): FieldMetaProps<any> => {\n      return {\n        value: getIn(state.values, name),\n        error: getIn(state.errors, name),\n        touched: !!getIn(state.touched, name),\n        initialValue: getIn(initialValues.current, name),\n        initialTouched: !!getIn(initialTouched.current, name),\n        initialError: getIn(initialErrors.current, name),\n      };\n    },\n    [state.errors, state.touched, state.values]\n  );\n\n  const getFieldHelpers = React.useCallback(\n    (name: string): FieldHelperProps<any> => {\n      return {\n        setValue: (value: any, shouldValidate?: boolean) =>\n          setFieldValue(name, value, shouldValidate),\n        setTouched: (value: boolean, shouldValidate?: boolean) =>\n          setFieldTouched(name, value, shouldValidate),\n        setError: (value: any) => setFieldError(name, value),\n      };\n    },\n    [setFieldValue, setFieldTouched, setFieldError]\n  );\n\n  const getFieldProps = React.useCallback(\n    (nameOrOptions: string | FieldConfig<any>): FieldInputProps<any> => {\n      const isAnObject = isObject(nameOrOptions);\n      const name = isAnObject\n        ? (nameOrOptions as FieldConfig<any>).name\n        : nameOrOptions;\n      const valueState = getIn(state.values, name);\n\n      const field: FieldInputProps<any> = {\n        name,\n        value: valueState,\n        onChange: handleChange,\n        onBlur: handleBlur,\n      };\n      if (isAnObject) {\n        const {\n          type,\n          value: valueProp, // value is special for checkboxes\n          as: is,\n          multiple,\n        } = nameOrOptions as FieldConfig<any>;\n\n        if (type === 'checkbox') {\n          if (valueProp === undefined) {\n            field.checked = !!valueState;\n          } else {\n            field.checked = !!(\n              Array.isArray(valueState) && ~valueState.indexOf(valueProp)\n            );\n            field.value = valueProp;\n          }\n        } else if (type === 'radio') {\n          field.checked = valueState === valueProp;\n          field.value = valueProp;\n        } else if (is === 'select' && multiple) {\n          field.value = field.value || [];\n          field.multiple = true;\n        }\n      }\n      return field;\n    },\n    [handleBlur, handleChange, state.values]\n  );\n\n  const dirty = React.useMemo(\n    () => !isEqual(initialValues.current, state.values),\n    [initialValues.current, state.values]\n  );\n\n  const isValid = React.useMemo(\n    () =>\n      typeof isInitialValid !== 'undefined'\n        ? dirty\n          ? state.errors && Object.keys(state.errors).length === 0\n          : isInitialValid !== false && isFunction(isInitialValid)\n          ? (isInitialValid as (props: FormikConfig<Values>) => boolean)(props)\n          : (isInitialValid as boolean)\n        : state.errors && Object.keys(state.errors).length === 0,\n    [isInitialValid, dirty, state.errors, props]\n  );\n\n  const ctx = {\n    ...state,\n    initialValues: initialValues.current,\n    initialErrors: initialErrors.current,\n    initialTouched: initialTouched.current,\n    initialStatus: initialStatus.current,\n    handleBlur,\n    handleChange,\n    handleReset,\n    handleSubmit,\n    resetForm,\n    setErrors,\n    setFormikState,\n    setFieldTouched,\n    setFieldValue,\n    setFieldError,\n    setStatus,\n    setSubmitting,\n    setTouched,\n    setValues,\n    submitForm,\n    validateForm: validateFormWithHighPriority,\n    validateField,\n    isValid,\n    dirty,\n    unregisterField,\n    registerField,\n    getFieldProps,\n    getFieldMeta,\n    getFieldHelpers,\n    validateOnBlur,\n    validateOnChange,\n    validateOnMount,\n  };\n\n  return ctx;\n}\n\nexport function Formik<\n  Values extends FormikValues = FormikValues,\n  ExtraProps = {}\n>(props: FormikConfig<Values> & ExtraProps) {\n  const formikbag = useFormik<Values>(props);\n  const { component, children, render, innerRef } = props;\n\n  // This allows folks to pass a ref to <Formik />\n  React.useImperativeHandle(innerRef, () => formikbag);\n\n  if (__DEV__) {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      invariant(\n        !props.render,\n        `<Formik render> has been deprecated and will be removed in future versions of Formik. Please use a child callback function instead. To get rid of this warning, replace <Formik render={(props) => ...} /> with <Formik>{(props) => ...}</Formik>`\n      );\n      // eslint-disable-next-line\n    }, []);\n  }\n  return (\n    <FormikProvider value={formikbag}>\n      {component\n        ? React.createElement(component as any, formikbag)\n        : render\n        ? render(formikbag)\n        : children // children come last, always called\n        ? isFunction(children)\n          ? (children as (bag: FormikProps<Values>) => React.ReactNode)(\n              formikbag as FormikProps<Values>\n            )\n          : !isEmptyChildren(children)\n          ? React.Children.only(children)\n          : null\n        : null}\n    </FormikProvider>\n  );\n}\n\nfunction warnAboutMissingIdentifier({\n  htmlContent,\n  documentationAnchorLink,\n  handlerName,\n}: {\n  htmlContent: string;\n  documentationAnchorLink: string;\n  handlerName: string;\n}) {\n  console.warn(\n    `Warning: Formik called \\`${handlerName}\\`, but you forgot to pass an \\`id\\` or \\`name\\` attribute to your input:\n    ${htmlContent}\n    Formik cannot determine which value to update. For more info see https://formik.org/docs/api/formik#${documentationAnchorLink}\n  `\n  );\n}\n\n/**\n * Transform Yup ValidationError to a more usable object\n */\nexport function yupToFormErrors<Values>(yupError: any): FormikErrors<Values> {\n  let errors: FormikErrors<Values> = {};\n  if (yupError.inner) {\n    if (yupError.inner.length === 0) {\n      return setIn(errors, yupError.path, yupError.message);\n    }\n    for (let err of yupError.inner) {\n      if (!getIn(errors, err.path)) {\n        errors = setIn(errors, err.path, err.message);\n      }\n    }\n  }\n  return errors;\n}\n\n/**\n * Validate a yup schema.\n */\nexport function validateYupSchema<T extends FormikValues>(\n  values: T,\n  schema: any,\n  sync: boolean = false,\n  context?: any\n): Promise<Partial<T>> {\n  const normalizedValues: FormikValues = prepareDataForValidation(values);\n\n  return schema[sync ? 'validateSync' : 'validate'](normalizedValues, {\n    abortEarly: false,\n    context: context || normalizedValues,\n  });\n}\n\n/**\n * Recursively prepare values.\n */\nexport function prepareDataForValidation<T extends FormikValues>(\n  values: T\n): FormikValues {\n  let data: FormikValues = Array.isArray(values) ? [] : {};\n  for (let k in values) {\n    if (Object.prototype.hasOwnProperty.call(values, k)) {\n      const key = String(k);\n      if (Array.isArray(values[key]) === true) {\n        data[key] = values[key].map((value: any) => {\n          if (Array.isArray(value) === true || isPlainObject(value)) {\n            return prepareDataForValidation(value);\n          } else {\n            return value !== '' ? value : undefined;\n          }\n        });\n      } else if (isPlainObject(values[key])) {\n        data[key] = prepareDataForValidation(values[key]);\n      } else {\n        data[key] = values[key] !== '' ? values[key] : undefined;\n      }\n    }\n  }\n  return data;\n}\n\n/**\n * deepmerge array merging algorithm\n * https://github.com/KyleAMathews/deepmerge#combine-array\n */\nfunction arrayMerge(target: any[], source: any[], options: any): any[] {\n  const destination = target.slice();\n\n  source.forEach(function merge(e: any, i: number) {\n    if (typeof destination[i] === 'undefined') {\n      const cloneRequested = options.clone !== false;\n      const shouldClone = cloneRequested && options.isMergeableObject(e);\n      destination[i] = shouldClone\n        ? deepmerge(Array.isArray(e) ? [] : {}, e, options)\n        : e;\n    } else if (options.isMergeableObject(e)) {\n      destination[i] = deepmerge(target[i], e, options);\n    } else if (target.indexOf(e) === -1) {\n      destination.push(e);\n    }\n  });\n  return destination;\n}\n\n/** Return multi select values based on an array of options */\nfunction getSelectedValues(options: any[]) {\n  return Array.from(options)\n    .filter(el => el.selected)\n    .map(el => el.value);\n}\n\n/** Return the next value for a checkbox */\nfunction getValueForCheckbox(\n  currentValue: string | any[],\n  checked: boolean,\n  valueProp: any\n) {\n  // If the current value was a boolean, return a boolean\n  if (typeof currentValue === 'boolean') {\n    return Boolean(checked);\n  }\n\n  // If the currentValue was not a boolean we want to return an array\n  let currentArrayOfValues = [];\n  let isValueInArray = false;\n  let index = -1;\n\n  if (!Array.isArray(currentValue)) {\n    // eslint-disable-next-line eqeqeq\n    if (!valueProp || valueProp == 'true' || valueProp == 'false') {\n      return Boolean(checked);\n    }\n  } else {\n    // If the current value is already an array, use it\n    currentArrayOfValues = currentValue;\n    index = currentValue.indexOf(valueProp);\n    isValueInArray = index >= 0;\n  }\n\n  // If the checkbox was checked and the value is not already present in the aray we want to add the new value to the array of values\n  if (checked && valueProp && !isValueInArray) {\n    return currentArrayOfValues.concat(valueProp);\n  }\n\n  // If the checkbox was unchecked and the value is not in the array, simply return the already existing array of values\n  if (!isValueInArray) {\n    return currentArrayOfValues;\n  }\n\n  // If the checkbox was unchecked and the value is in the array, remove the value and return the array\n  return currentArrayOfValues\n    .slice(0, index)\n    .concat(currentArrayOfValues.slice(index + 1));\n}\n\n// React currently throws a warning when using useLayoutEffect on the server.\n// To get around it, we can conditionally useEffect on the server (no-op) and\n// useLayoutEffect in the browser.\n// @see https://gist.github.com/gaearon/e7d97cdf38a2907924ea12e4ebdf3c85\nconst useIsomorphicLayoutEffect =\n  typeof window !== 'undefined' &&\n  typeof window.document !== 'undefined' &&\n  typeof window.document.createElement !== 'undefined'\n    ? React.useLayoutEffect\n    : React.useEffect;\n\nfunction useEventCallback<T extends (...args: any[]) => any>(fn: T): T {\n  const ref: any = React.useRef(fn);\n\n  // we copy a ref to the callback scoped to the current state/props on each render\n  useIsomorphicLayoutEffect(() => {\n    ref.current = fn;\n  });\n\n  return React.useCallback(\n    (...args: any[]) => ref.current.apply(void 0, args),\n    []\n  ) as T;\n}\n", "import * as React from 'react';\nimport {\n  FormikProps,\n  GenericFieldHTMLAttributes,\n  FieldMetaProps,\n  FieldHelperProps,\n  FieldInputProps,\n  FieldValidator,\n} from './types';\nimport { useFormikContext } from './FormikContext';\nimport { isFunction, isEmptyChildren, isObject } from './utils';\nimport invariant from 'tiny-warning';\n\nexport interface FieldProps<V = any, FormValues = any> {\n  field: FieldInputProps<V>;\n  form: FormikProps<FormValues>; // if ppl want to restrict this for a given form, let them.\n  meta: FieldMetaProps<V>;\n}\n\nexport interface FieldConfig<V = any> {\n  /**\n   * Field component to render. Can either be a string like 'select' or a component.\n   */\n  component?:\n  | string\n  | React.ComponentType<FieldProps<V>>\n  | React.ComponentType\n  | React.ForwardRefExoticComponent<any>;\n\n  /**\n   * Component to render. Can either be a string e.g. 'select', 'input', or 'textarea', or a component.\n   */\n  as?:\n  | React.ComponentType<FieldProps<V>['field']>\n  | string\n  | React.ComponentType\n  | React.ForwardRefExoticComponent<any>;\n\n  /**\n   * Render prop (works like React router's <Route render={props =>} />)\n   * @deprecated\n   */\n  render?: (props: FieldProps<V>) => React.ReactNode;\n\n  /**\n   * Children render function <Field name>{props => ...}</Field>)\n   */\n  children?: ((props: FieldProps<V>) => React.ReactNode) | React.ReactNode;\n\n  /**\n   * Validate a single field value independently\n   */\n  validate?: FieldValidator;\n\n  /**\n   * Used for 'select' and related input types.\n   */\n  multiple?: boolean;\n\n  /**\n   * Field name\n   */\n  name: string;\n\n  /** HTML input type */\n  type?: string;\n\n  /** Field value */\n  value?: any;\n\n  /** Inner ref */\n  innerRef?: (instance: any) => void;\n}\n\nexport type FieldAttributes<T> = { className?: string; } & GenericFieldHTMLAttributes &\n  FieldConfig<T> &\n  T & {\n    name: string,\n  };\n\nexport type FieldHookConfig<T> = GenericFieldHTMLAttributes & FieldConfig<T>;\n\nexport function useField<Val = any>(\n  propsOrFieldName: string | FieldHookConfig<Val>\n): [FieldInputProps<Val>, FieldMetaProps<Val>, FieldHelperProps<Val>] {\n  const formik = useFormikContext();\n  const {\n    getFieldProps,\n    getFieldMeta,\n    getFieldHelpers,\n    registerField,\n    unregisterField,\n  } = formik;\n\n  const isAnObject = isObject(propsOrFieldName);\n\n  // Normalize propsOrFieldName to FieldHookConfig<Val>\n  const props: FieldHookConfig<Val> = isAnObject\n    ? (propsOrFieldName as FieldHookConfig<Val>)\n    : { name: propsOrFieldName as string };\n\n  const { name: fieldName, validate: validateFn } = props;\n\n  React.useEffect(() => {\n    if (fieldName) {\n      registerField(fieldName, {\n        validate: validateFn,\n      });\n    }\n    return () => {\n      if (fieldName) {\n        unregisterField(fieldName);\n      }\n    };\n  }, [registerField, unregisterField, fieldName, validateFn]);\n\n  if (__DEV__) {\n    invariant(\n      formik,\n      'useField() / <Field /> must be used underneath a <Formik> component or withFormik() higher order component'\n    );\n  }\n\n  invariant(\n    fieldName,\n    'Invalid field name. Either pass `useField` a string or an object containing a `name` key.'\n  );\n\n  const fieldHelpers = React.useMemo(() => getFieldHelpers(fieldName), [\n    getFieldHelpers,\n    fieldName,\n  ]);\n\n  return [getFieldProps(props), getFieldMeta(fieldName), fieldHelpers];\n}\n\nexport function Field({\n  validate,\n  name,\n  render,\n  children,\n  as: is, // `as` is reserved in typescript lol\n  component,\n  className,\n  ...props\n}: FieldAttributes<any>) {\n  const {\n    validate: _validate,\n    validationSchema: _validationSchema,\n\n    ...formik\n  } = useFormikContext();\n\n  if (__DEV__) {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      invariant(\n        !render,\n        `<Field render> has been deprecated and will be removed in future versions of Formik. Please use a child callback function instead. To get rid of this warning, replace <Field name=\"${name}\" render={({field, form}) => ...} /> with <Field name=\"${name}\">{({field, form, meta}) => ...}</Field>`\n      );\n\n      invariant(\n        !(is && children && isFunction(children)),\n        'You should not use <Field as> and <Field children> as a function in the same <Field> component; <Field as> will be ignored.'\n      );\n\n      invariant(\n        !(component && children && isFunction(children)),\n        'You should not use <Field component> and <Field children> as a function in the same <Field> component; <Field component> will be ignored.'\n      );\n\n      invariant(\n        !(render && children && !isEmptyChildren(children)),\n        'You should not use <Field render> and <Field children> in the same <Field> component; <Field children> will be ignored'\n      );\n      // eslint-disable-next-line\n    }, []);\n  }\n\n  // Register field and field-level validation with parent <Formik>\n  const { registerField, unregisterField } = formik;\n  React.useEffect(() => {\n    registerField(name, {\n      validate: validate,\n    });\n    return () => {\n      unregisterField(name);\n    };\n  }, [registerField, unregisterField, name, validate]);\n  const field = formik.getFieldProps({ name, ...props });\n  const meta = formik.getFieldMeta(name);\n  const legacyBag = { field, form: formik };\n\n  if (render) {\n    return render({ ...legacyBag, meta });\n  }\n\n  if (isFunction(children)) {\n    return children({ ...legacyBag, meta });\n  }\n\n  if (component) {\n    // This behavior is backwards compat with earlier Formik 0.9 to 1.x\n    if (typeof component === 'string') {\n      const { innerRef, ...rest } = props;\n      return React.createElement(\n        component,\n        { ref: innerRef, ...field, ...rest, className },\n        children\n      );\n    }\n    // We don't pass `meta` for backwards compat\n    return React.createElement(\n      component,\n      { field, form: formik, ...props, className },\n      children\n    );\n  }\n\n  // default to input here so we can check for both `as` and `children` above\n  const asElement = is || 'input';\n\n  if (typeof asElement === 'string') {\n    const { innerRef, ...rest } = props;\n    return React.createElement(\n      asElement,\n      { ref: innerRef, ...field, ...rest, className },\n      children\n    );\n  }\n\n  return React.createElement(asElement, { ...field, ...props, className }, children);\n}\n", "import * as React from 'react';\nimport { useFormikContext } from './FormikContext';\n\nexport type FormikFormProps = Pick<\n  React.FormHTMLAttributes<HTMLFormElement>,\n  Exclude<\n    keyof React.FormHTMLAttributes<HTMLFormElement>,\n    'onReset' | 'onSubmit'\n  >\n>;\n\ntype FormProps = React.ComponentPropsWithoutRef<'form'>;\n\n// @todo tests\nexport const Form = React.forwardRef<HTMLFormElement, FormProps>(\n  (props: FormikFormProps, ref) => {\n    // iOS needs an \"action\" attribute for nice input: https://stackoverflow.com/a/39485162/406725\n    // We default the action to \"#\" in case the preventDefault fails (just updates the URL hash)\n    const { action, ...rest } = props;\n    const _action = action ?? '#';\n    const { handleReset, handleSubmit } = useFormikContext();\n    return (\n      <form\n        onSubmit={handleSubmit}\n        ref={ref}\n        onReset={handleReset}\n        action={_action}\n        {...rest}\n      />\n    );\n  }\n);\n\nForm.displayName = 'Form';\n", "import hoistNonReactStatics from 'hoist-non-react-statics';\nimport * as React from 'react';\nimport { Formik } from './Formik';\nimport {\n  FormikHelpers,\n  FormikProps,\n  FormikSharedConfig,\n  FormikValues,\n  FormikTouched,\n  FormikErrors,\n} from './types';\nimport { isFunction } from './utils';\n\n/**\n * State, handlers, and helpers injected as props into the wrapped form component.\n * Used with withFormik()\n *\n * @deprecated  Use `OuterProps & FormikProps<Values>` instead.\n */\nexport type InjectedFormikProps<Props, Values> = Props & FormikProps<Values>;\n\n/**\n * Formik helpers + { props }\n */\nexport type FormikBag<P, V> = { props: P } & FormikHelpers<V>;\n\n/**\n * withFormik() configuration options. Backwards compatible.\n */\nexport interface WithFormikConfig<\n  Props,\n  Values extends FormikValues = FormikValues,\n  DeprecatedPayload = Values\n> extends FormikSharedConfig<Props> {\n  /**\n   * Set the display name of the component. Useful for React DevTools.\n   */\n  displayName?: string;\n\n  /**\n   * Submission handler\n   */\n  handleSubmit: (values: Values, formikBag: FormikBag<Props, Values>) => void;\n\n  /**\n   * Map props to the form values\n   */\n  mapPropsToValues?: (props: Props) => Values;\n\n  /**\n   * Map props to the form status\n   */\n  mapPropsToStatus?: (props: Props) => any;\n\n  /**\n   * Map props to the form touched state\n   */\n  mapPropsToTouched?: (props: Props) => FormikTouched<Values>;\n\n  /**\n   * Map props to the form errors state\n   */\n  mapPropsToErrors?: (props: Props) => FormikErrors<Values>;\n\n  /**\n   * @deprecated in 0.9.0 (but needed to break TS types)\n   */\n  mapValuesToPayload?: (values: Values) => DeprecatedPayload;\n\n  /**\n   * A Yup Schema or a function that returns a Yup schema\n   */\n  validationSchema?: any | ((props: Props) => any);\n\n  /**\n   * Validation function. Must return an error object or promise that\n   * throws an error object where that object keys map to corresponding value.\n   */\n  validate?: (values: Values, props: Props) => void | object | Promise<any>;\n}\n\nexport type CompositeComponent<P> =\n  | React.ComponentClass<P>\n  | React.FunctionComponent<P>;\n\nexport interface ComponentDecorator<TOwnProps, TMergedProps> {\n  (component: CompositeComponent<TMergedProps>): React.ComponentType<TOwnProps>;\n}\n\nexport interface InferableComponentDecorator<TOwnProps> {\n  <T extends CompositeComponent<TOwnProps>>(component: T): T;\n}\n\n/**\n * A public higher-order component to access the imperative API\n */\nexport function withFormik<\n  OuterProps extends object,\n  Values extends FormikValues,\n  Payload = Values\n>({\n  mapPropsToValues = (vanillaProps: OuterProps): Values => {\n    let val: Values = {} as Values;\n    for (let k in vanillaProps) {\n      if (\n        vanillaProps.hasOwnProperty(k) &&\n        typeof vanillaProps[k] !== 'function'\n      ) {\n        // @todo TypeScript fix\n        (val as any)[k] = vanillaProps[k];\n      }\n    }\n    return val as Values;\n  },\n  ...config\n}: WithFormikConfig<OuterProps, Values, Payload>): ComponentDecorator<\n  OuterProps,\n  OuterProps & FormikProps<Values>\n> {\n  return function createFormik(\n    Component: CompositeComponent<OuterProps & FormikProps<Values>>\n  ): React.ComponentClass<OuterProps> {\n    const componentDisplayName =\n      Component.displayName ||\n      Component.name ||\n      (Component.constructor && Component.constructor.name) ||\n      'Component';\n    /**\n     * We need to use closures here for to provide the wrapped component's props to\n     * the respective withFormik config methods.\n     */\n    class C extends React.Component<OuterProps, {}> {\n      static displayName = `WithFormik(${componentDisplayName})`;\n\n      validate = (values: Values): void | object | Promise<any> => {\n        return config.validate!(values, this.props);\n      };\n\n      validationSchema = () => {\n        return isFunction(config.validationSchema)\n          ? config.validationSchema!(this.props)\n          : config.validationSchema;\n      };\n\n      handleSubmit = (values: Values, actions: FormikHelpers<Values>) => {\n        return config.handleSubmit(values, {\n          ...actions,\n          props: this.props,\n        });\n      };\n\n      /**\n       * Just avoiding a render callback for perf here\n       */\n      renderFormComponent = (formikProps: FormikProps<Values>) => {\n        return <Component {...this.props} {...formikProps} />;\n      };\n\n      render() {\n        const { children, ...props } = this.props as any;\n        return (\n          <Formik\n            {...props}\n            {...config}\n            validate={config.validate && this.validate}\n            validationSchema={config.validationSchema && this.validationSchema}\n            initialValues={mapPropsToValues(this.props)}\n            initialStatus={\n              config.mapPropsToStatus && config.mapPropsToStatus(this.props)\n            }\n            initialErrors={\n              config.mapPropsToErrors && config.mapPropsToErrors(this.props)\n            }\n            initialTouched={\n              config.mapPropsToTouched && config.mapPropsToTouched(this.props)\n            }\n            onSubmit={this.handleSubmit as any}\n            children={this.renderFormComponent}\n          />\n        );\n      }\n    }\n\n    return hoistNonReactStatics(\n      C,\n      Component as React.ComponentClass<OuterProps & FormikProps<Values>> // cast type to ComponentClass (even if SFC)\n    ) as React.ComponentClass<OuterProps>;\n  };\n}\n", "import * as React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\n\nimport { FormikContextType } from './types';\nimport { FormikConsumer } from './FormikContext';\nimport invariant from 'tiny-warning';\n\n/**\n * Connect any component to Formik context, and inject as a prop called `formik`;\n * @param Comp React Component\n */\nexport function connect<OuterProps, Values = {}>(\n  Comp: React.ComponentType<OuterProps & { formik: FormikContextType<Values> }>\n) {\n  const C: React.FC<OuterProps> = props => (\n    <FormikConsumer>\n      {formik => {\n        invariant(\n          !!formik,\n          `Formik context is undefined, please verify you are rendering <Form>, <Field>, <FastField>, <FieldArray>, or your custom context-using component as a child of a <Formik> component. Component name: ${Comp.name}`\n        );\n        return <Comp {...props} formik={formik} />;\n      }}\n    </FormikConsumer>\n  );\n\n  const componentDisplayName =\n    Comp.displayName ||\n    Comp.name ||\n    (Comp.constructor && Comp.constructor.name) ||\n    'Component';\n\n  // Assign Comp to C.WrappedComponent so we can access the inner component in tests\n  // For example, <Field.WrappedComponent /> gets us <FieldInner/>\n  (C as React.FC<OuterProps> & {\n    WrappedComponent: typeof Comp;\n  }).WrappedComponent = Comp;\n\n  C.displayName = `FormikConnect(${componentDisplayName})`;\n\n  return hoistNonReactStatics(\n    C,\n    Comp as React.ComponentClass<\n      OuterProps & { formik: FormikContextType<Values> }\n    > // cast type to ComponentClass (even if SFC)\n  );\n}\n", "import cloneDeep from 'lodash/cloneDeep';\nimport * as React from 'react';\nimport isEqual from 'react-fast-compare';\nimport { connect } from './connect';\nimport {\n  FormikContextType,\n  FormikProps,\n  FormikState,\n  SharedRenderProps,\n} from './types';\nimport {\n  getIn,\n  isEmptyArray,\n  isEmptyChildren,\n  isFunction,\n  isObject,\n  setIn,\n} from './utils';\n\nexport type FieldArrayRenderProps = ArrayHelpers & {\n  form: FormikProps<any>;\n  name: string;\n};\n\nexport type FieldArrayConfig = {\n  /** Really the path to the array field to be updated */\n  name: string;\n  /** Should field array validate the form AFTER array updates/changes? */\n  validateOnChange?: boolean;\n} & SharedRenderProps<FieldArrayRenderProps>;\nexport interface ArrayHelpers<T extends any[] = any[]> {\n  /** Imperatively add a value to the end of an array */\n  push<X = T[number]>(obj: X): void;\n  /** Curried fn to add a value to the end of an array */\n  handlePush<X = T[number]>(obj: X): () => void;\n  /** Imperatively swap two values in an array */\n  swap: (indexA: number, indexB: number) => void;\n  /** Curried fn to swap two values in an array */\n  handleSwap: (indexA: number, indexB: number) => () => void;\n  /** Imperatively move an element in an array to another index */\n  move: (from: number, to: number) => void;\n  /** Imperatively move an element in an array to another index */\n  handleMove: (from: number, to: number) => () => void;\n  /** Imperatively insert an element at a given index into the array */\n  insert<X = T[number]>(index: number, value: X): void;\n  /** Curried fn to insert an element at a given index into the array */\n  handleInsert<X = T[number]>(index: number, value: X): () => void;\n  /** Imperatively replace a value at an index of an array  */\n  replace<X = T[number]>(index: number, value: X): void;\n  /** Curried fn to replace an element at a given index into the array */\n  handleReplace<X = T[number]>(index: number, value: X): () => void;\n  /** Imperatively add an element to the beginning of an array and return its length */\n  unshift<X = T[number]>(value: X): number;\n  /** Curried fn to add an element to the beginning of an array */\n  handleUnshift<X = T[number]>(value: X): () => void;\n  /** Curried fn to remove an element at an index of an array */\n  handleRemove: (index: number) => () => void;\n  /** Curried fn to remove a value from the end of the array */\n  handlePop: () => () => void;\n  /** Imperatively remove and element at an index of an array */\n  remove<X = T[number]>(index: number): X | undefined;\n  /** Imperatively remove and return value from the end of the array */\n  pop<X = T[number]>(): X | undefined;\n}\n\n/**\n * Some array helpers!\n */\nexport const move = <T,>(array: T[], from: number, to: number) => {\n  const copy = copyArrayLike(array);\n  const value = copy[from];\n  copy.splice(from, 1);\n  copy.splice(to, 0, value);\n  return copy;\n};\n\nexport const swap = <T,>(\n  arrayLike: ArrayLike<T>,\n  indexA: number,\n  indexB: number\n) => {\n  const copy = copyArrayLike(arrayLike);\n  const a = copy[indexA];\n  copy[indexA] = copy[indexB];\n  copy[indexB] = a;\n  return copy;\n};\n\nexport const insert = <T,>(\n  arrayLike: ArrayLike<T>,\n  index: number,\n  value: T\n) => {\n  const copy = copyArrayLike(arrayLike);\n  copy.splice(index, 0, value);\n  return copy;\n};\n\nexport const replace = <T,>(\n  arrayLike: ArrayLike<T>,\n  index: number,\n  value: T\n) => {\n  const copy = copyArrayLike(arrayLike);\n  copy[index] = value;\n  return copy;\n};\n\nconst copyArrayLike = (arrayLike: ArrayLike<any>) => {\n  if (!arrayLike) {\n    return [];\n  } else if (Array.isArray(arrayLike)) {\n    return [...arrayLike];\n  } else {\n    const maxIndex = Object.keys(arrayLike)\n      .map(key => parseInt(key))\n      .reduce((max, el) => (el > max ? el : max), 0);\n    return Array.from({ ...arrayLike, length: maxIndex + 1 });\n  }\n};\n\nconst createAlterationHandler = (\n  alteration: boolean | Function,\n  defaultFunction: Function\n) => {\n  const fn = typeof alteration === 'function' ? alteration : defaultFunction;\n\n  return (data: any | any[]) => {\n    if (Array.isArray(data) || isObject(data)) {\n      const clone = copyArrayLike(data);\n      return fn(clone);\n    }\n\n    // This can be assumed to be a primitive, which\n    // is a case for top level validation errors\n    return data;\n  };\n};\n\nclass FieldArrayInner<Values = {}> extends React.Component<\n  FieldArrayConfig & { formik: FormikContextType<Values> },\n  {}\n> {\n  static defaultProps = {\n    validateOnChange: true,\n  };\n\n  constructor(props: FieldArrayConfig & { formik: FormikContextType<Values> }) {\n    super(props);\n    // We need TypeScript generics on these, so we'll bind them in the constructor\n    // @todo Fix TS 3.2.1\n    this.remove = this.remove.bind(this) as any;\n    this.pop = this.pop.bind(this) as any;\n  }\n\n  componentDidUpdate(\n    prevProps: FieldArrayConfig & { formik: FormikContextType<Values> }\n  ) {\n    if (\n      this.props.validateOnChange &&\n      this.props.formik.validateOnChange &&\n      !isEqual(\n        getIn(prevProps.formik.values, prevProps.name),\n        getIn(this.props.formik.values, this.props.name)\n      )\n    ) {\n      this.props.formik.validateForm(this.props.formik.values);\n    }\n  }\n\n  updateArrayField = (\n    fn: Function,\n    alterTouched: boolean | Function,\n    alterErrors: boolean | Function\n  ) => {\n    const {\n      name,\n\n      formik: { setFormikState },\n    } = this.props;\n\n    setFormikState((prevState: FormikState<any>) => {\n      let updateErrors = createAlterationHandler(alterErrors, fn);\n      let updateTouched = createAlterationHandler(alterTouched, fn);\n\n      // values fn should be executed before updateErrors and updateTouched,\n      // otherwise it causes an error with unshift.\n      let values = setIn(\n        prevState.values,\n        name,\n        fn(getIn(prevState.values, name))\n      );\n\n      let fieldError = alterErrors\n        ? updateErrors(getIn(prevState.errors, name))\n        : undefined;\n      let fieldTouched = alterTouched\n        ? updateTouched(getIn(prevState.touched, name))\n        : undefined;\n\n      if (isEmptyArray(fieldError)) {\n        fieldError = undefined;\n      }\n      if (isEmptyArray(fieldTouched)) {\n        fieldTouched = undefined;\n      }\n\n      return {\n        ...prevState,\n        values,\n        errors: alterErrors\n          ? setIn(prevState.errors, name, fieldError)\n          : prevState.errors,\n        touched: alterTouched\n          ? setIn(prevState.touched, name, fieldTouched)\n          : prevState.touched,\n      };\n    });\n  };\n\n  push = (value: any) =>\n    this.updateArrayField(\n      (arrayLike: ArrayLike<any>) => [\n        ...copyArrayLike(arrayLike),\n        cloneDeep(value),\n      ],\n      false,\n      false\n    );\n\n  handlePush = (value: any) => () => this.push(value);\n\n  swap = (indexA: number, indexB: number) =>\n    this.updateArrayField(\n      (array: any[]) => swap(array, indexA, indexB),\n      true,\n      true\n    );\n\n  handleSwap = (indexA: number, indexB: number) => () =>\n    this.swap(indexA, indexB);\n\n  move = (from: number, to: number) =>\n    this.updateArrayField((array: any[]) => move(array, from, to), true, true);\n\n  handleMove = (from: number, to: number) => () => this.move(from, to);\n\n  insert = (index: number, value: any) =>\n    this.updateArrayField(\n      (array: any[]) => insert(array, index, value),\n      (array: any[]) => insert(array, index, null),\n      (array: any[]) => insert(array, index, null)\n    );\n\n  handleInsert = (index: number, value: any) => () => this.insert(index, value);\n\n  replace = (index: number, value: any) =>\n    this.updateArrayField(\n      (array: any[]) => replace(array, index, value),\n      false,\n      false\n    );\n\n  handleReplace = (index: number, value: any) => () =>\n    this.replace(index, value);\n\n  unshift = (value: any) => {\n    let length = -1;\n    this.updateArrayField(\n      (array: any[]) => {\n        const arr = array ? [value, ...array] : [value];\n\n        length = arr.length;\n\n        return arr;\n      },\n      (array: any[]) => {\n        return array ? [null, ...array] : [null];\n      },\n      (array: any[]) => {\n        return array ? [null, ...array] : [null];\n      }\n    );\n\n    return length;\n  };\n\n  handleUnshift = (value: any) => () => this.unshift(value);\n\n  remove<T>(index: number): T {\n    // We need to make sure we also remove relevant pieces of `touched` and `errors`\n    let result: any;\n    this.updateArrayField(\n      // so this gets call 3 times\n      (array?: any[]) => {\n        const copy = array ? copyArrayLike(array) : [];\n        if (!result) {\n          result = copy[index];\n        }\n        if (isFunction(copy.splice)) {\n          copy.splice(index, 1);\n        }\n        // if the array only includes undefined values we have to return an empty array\n        return isFunction(copy.every)\n          ? copy.every(v => v === undefined)\n            ? []\n            : copy\n          : copy;\n      },\n      true,\n      true\n    );\n\n    return result as T;\n  }\n\n  handleRemove = (index: number) => () => this.remove<any>(index);\n\n  pop<T>(): T {\n    // Remove relevant pieces of `touched` and `errors` too!\n    let result: any;\n    this.updateArrayField(\n      // so this gets call 3 times\n      (array: any[]) => {\n        const tmp = array.slice();\n        if (!result) {\n          result = tmp && tmp.pop && tmp.pop();\n        }\n        return tmp;\n      },\n      true,\n      true\n    );\n\n    return result as T;\n  }\n\n  handlePop = () => () => this.pop<any>();\n\n  render() {\n    const arrayHelpers: ArrayHelpers = {\n      push: this.push,\n      pop: this.pop,\n      swap: this.swap,\n      move: this.move,\n      insert: this.insert,\n      replace: this.replace,\n      unshift: this.unshift,\n      remove: this.remove,\n      handlePush: this.handlePush,\n      handlePop: this.handlePop,\n      handleSwap: this.handleSwap,\n      handleMove: this.handleMove,\n      handleInsert: this.handleInsert,\n      handleReplace: this.handleReplace,\n      handleUnshift: this.handleUnshift,\n      handleRemove: this.handleRemove,\n    };\n\n    const {\n      component,\n      render,\n      children,\n      name,\n      formik: {\n        validate: _validate,\n        validationSchema: _validationSchema,\n        ...restOfFormik\n      },\n    } = this.props;\n\n    const props: FieldArrayRenderProps = {\n      ...arrayHelpers,\n      form: restOfFormik,\n      name,\n    };\n\n    return component\n      ? React.createElement(component as any, props)\n      : render\n      ? (render as any)(props)\n      : children // children come last, always called\n      ? typeof children === 'function'\n        ? (children as any)(props)\n        : !isEmptyChildren(children)\n        ? React.Children.only(children)\n        : null\n      : null;\n  }\n}\n\nexport const FieldArray = connect<FieldArrayConfig, any>(FieldArrayInner);\n", "import * as React from 'react';\nimport { FormikContextType } from './types';\nimport { getIn, isFunction } from './utils';\nimport { connect } from './connect';\n\nexport interface ErrorMessageProps {\n  id?: string;\n  name: string;\n  className?: string;\n  component?: string | React.ComponentType;\n  children?: (errorMessage: string) => React.ReactNode;\n  render?: (errorMessage: string) => React.ReactNode;\n}\n\nclass ErrorMessageImpl extends React.Component<\n  ErrorMessageProps & { formik: FormikContextType<any> }\n> {\n  shouldComponentUpdate(\n    props: ErrorMessageProps & { formik: FormikContextType<any> }\n  ) {\n    if (\n      getIn(this.props.formik.errors, this.props.name) !==\n        getIn(props.formik.errors, this.props.name) ||\n      getIn(this.props.formik.touched, this.props.name) !==\n        getIn(props.formik.touched, this.props.name) ||\n      Object.keys(this.props).length !== Object.keys(props).length\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  render() {\n    let { component, formik, render, children, name, ...rest } = this.props;\n\n    const touch = getIn(formik.touched, name);\n    const error = getIn(formik.errors, name);\n\n    return !!touch && !!error\n      ? render\n        ? isFunction(render)\n          ? render(error)\n          : null\n        : children\n        ? isFunction(children)\n          ? children(error)\n          : null\n        : component\n        ? React.createElement(component, rest as any, error)\n        : error\n      : null;\n  }\n}\n\nexport const ErrorMessage = connect<\n  ErrorMessageProps,\n  ErrorMessageProps & { formik: FormikContextType<any> }\n>(ErrorMessageImpl);\n", "import * as React from 'react';\n\nimport {\n  FormikProps,\n  GenericFieldHTMLAttributes,\n  FormikContextType,\n  FieldMetaProps,\n  FieldInputProps,\n} from './types';\nimport invariant from 'tiny-warning';\nimport { getIn, isEmptyChildren, isFunction } from './utils';\nimport { FieldConfig } from './Field';\nimport { connect } from './connect';\n\ntype $FixMe = any;\n\nexport interface FastFieldProps<V = any> {\n  field: FieldInputProps<V>;\n  meta: FieldMetaProps<V>;\n  form: FormikProps<V>; // if ppl want to restrict this for a given form, let them.\n}\n\nexport type FastFieldConfig<T> = FieldConfig & {\n  /** Override FastField's default shouldComponentUpdate */\n  shouldUpdate?: (\n    nextProps: T & GenericFieldHTMLAttributes,\n    props: {}\n  ) => boolean;\n};\n\nexport type FastFieldAttributes<T> = GenericFieldHTMLAttributes &\n  FastFieldConfig<T> &\n  T;\n\ntype FastFieldInnerProps<Values = {}, Props = {}> = FastFieldAttributes<\n  Props\n> & { formik: FormikContextType<Values> };\n\n/**\n * Custom Field component for quickly hooking into Formik\n * context and wiring up forms.\n */\nclass FastFieldInner<Values = {}, Props = {}> extends React.Component<\n  FastFieldInnerProps<Values, Props>,\n  {}\n> {\n  constructor(props: FastFieldInnerProps<Values, Props>) {\n    super(props);\n    const { render, children, component, as: is, name } = props;\n    invariant(\n      !render,\n      `<FastField render> has been deprecated. Please use a child callback function instead: <FastField name={${name}}>{props => ...}</FastField> instead.`\n    );\n    invariant(\n      !(component && render),\n      'You should not use <FastField component> and <FastField render> in the same <FastField> component; <FastField component> will be ignored'\n    );\n\n    invariant(\n      !(is && children && isFunction(children)),\n      'You should not use <FastField as> and <FastField children> as a function in the same <FastField> component; <FastField as> will be ignored.'\n    );\n\n    invariant(\n      !(component && children && isFunction(children)),\n      'You should not use <FastField component> and <FastField children> as a function in the same <FastField> component; <FastField component> will be ignored.'\n    );\n\n    invariant(\n      !(render && children && !isEmptyChildren(children)),\n      'You should not use <FastField render> and <FastField children> in the same <FastField> component; <FastField children> will be ignored'\n    );\n  }\n\n  shouldComponentUpdate(props: FastFieldInnerProps<Values, Props>) {\n    if (this.props.shouldUpdate) {\n      return this.props.shouldUpdate(props, this.props);\n    } else if (\n      props.name !== this.props.name ||\n      getIn(props.formik.values, this.props.name) !==\n        getIn(this.props.formik.values, this.props.name) ||\n      getIn(props.formik.errors, this.props.name) !==\n        getIn(this.props.formik.errors, this.props.name) ||\n      getIn(props.formik.touched, this.props.name) !==\n        getIn(this.props.formik.touched, this.props.name) ||\n      Object.keys(this.props).length !== Object.keys(props).length ||\n      props.formik.isSubmitting !== this.props.formik.isSubmitting\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  componentDidMount() {\n    // Register the Field with the parent Formik. Parent will cycle through\n    // registered Field's validate fns right prior to submit\n    this.props.formik.registerField(this.props.name, {\n      validate: this.props.validate,\n    });\n  }\n\n  componentDidUpdate(prevProps: FastFieldAttributes<Props>) {\n    if (this.props.name !== prevProps.name) {\n      this.props.formik.unregisterField(prevProps.name);\n      this.props.formik.registerField(this.props.name, {\n        validate: this.props.validate,\n      });\n    }\n\n    if (this.props.validate !== prevProps.validate) {\n      this.props.formik.registerField(this.props.name, {\n        validate: this.props.validate,\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this.props.formik.unregisterField(this.props.name);\n  }\n\n  render() {\n    const {\n      validate,\n      name,\n      render,\n      as: is,\n      children,\n      component,\n      shouldUpdate,\n      formik,\n      ...props\n    } = this.props as FastFieldInnerProps<Values, Props>;\n\n    const {\n      validate: _validate,\n      validationSchema: _validationSchema,\n      ...restOfFormik\n    } = formik;\n    const field = formik.getFieldProps({ name, ...props });\n    const meta = {\n      value: getIn(formik.values, name),\n      error: getIn(formik.errors, name),\n      touched: !!getIn(formik.touched, name),\n      initialValue: getIn(formik.initialValues, name),\n      initialTouched: !!getIn(formik.initialTouched, name),\n      initialError: getIn(formik.initialErrors, name),\n    };\n\n    const bag = { field, meta, form: restOfFormik };\n\n    if (render) {\n      return (render as any)(bag);\n    }\n\n    if (isFunction(children)) {\n      return (children as (props: FastFieldProps<any>) => React.ReactNode)(bag);\n    }\n\n    if (component) {\n      // This behavior is backwards compat with earlier Formik 0.9 to 1.x\n      if (typeof component === 'string') {\n        const { innerRef, ...rest } = props;\n        return React.createElement(\n          component,\n          { ref: innerRef, ...field, ...(rest as $FixMe) },\n          children\n        );\n      }\n      // We don't pass `meta` for backwards compat\n      return React.createElement(\n        component as React.ComponentClass<$FixMe>,\n        { field, form: formik, ...props },\n        children\n      );\n    }\n\n    // default to input here so we can check for both `as` and `children` above\n    const asElement = is || 'input';\n\n    if (typeof asElement === 'string') {\n      const { innerRef, ...rest } = props;\n      return React.createElement(\n        asElement,\n        { ref: innerRef, ...field, ...(rest as $FixMe) },\n        children\n      );\n    }\n\n    return React.createElement(\n      asElement as React.ComponentClass,\n      { ...field, ...props },\n      children\n    );\n  }\n}\n\nexport const FastField = connect<FastFieldAttributes<any>, any>(FastFieldInner);\n"],
  "mappings": "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",
  "names": ["isMergeableObject", "FormikContext", "React", "undefined", "displayName", "FormikProvider", "Provider", "FormikConsumer", "Consumer", "useFormikContext", "formik", "invariant", "isEmptyArray", "value", "Array", "isArray", "length", "isFunction", "obj", "isObject", "isInteger", "String", "Math", "floor", "Number", "isString", "Object", "prototype", "toString", "call", "isNaN", "isEmptyChildren", "children", "count", "isPromise", "then", "isInputEvent", "target", "getActiveElement", "doc", "document", "activeElement", "body", "e", "getIn", "key", "def", "p", "path", "toPath", "setIn", "res", "clone", "resVal", "i", "pathArray", "currentPath", "currentObj", "slice", "nextPath", "setNestedObjectValues", "object", "visited", "response", "WeakMap", "keys", "k", "val", "get", "set", "formikReducer", "state", "msg", "type", "values", "payload", "touched", "isEqual", "errors", "status", "isSubmitting", "isValidating", "field", "submitCount", "emptyErrors", "emptyTouched", "useFormik", "validateOnChange", "validateOnBlur", "validateOnMount", "isInitialValid", "enableReinitialize", "onSubmit", "rest", "props", "initialValues", "initialErrors", "initialTouched", "initialStatus", "isMounted", "fieldRegistry", "current", "setIteration", "stateRef", "dispatch", "action", "prev", "x", "runValidateHandler", "Promise", "resolve", "reject", "maybePromisedErrors", "validate", "actualException", "process", "console", "warn", "runValidationSchema", "validationSchema", "schema", "promise", "validateAt", "validateYupSchema", "err", "name", "yupToFormErrors", "runSingleFieldLevelValidation", "runFieldLevelValidations", "fieldKeysWithValidation", "filter", "f", "fieldValidations", "map", "all", "fieldErrorsList", "reduce", "curr", "index", "runAllValidations", "fieldErrors", "schemaErrors", "validateErrors", "combinedErrors", "deepmerge", "arrayMerge", "validateFormWithHighPriority", "useEventCallback", "resetForm", "nextState", "dispatchFn", "onReset", "maybePromisedOnReset", "imperativeMethods", "validateField", "maybePromise", "error", "registerField", "unregisterField", "setTouched", "shouldValidate", "willValidate", "setErrors", "setValues", "resolvedValues", "setFieldError", "setFieldValue", "executeChange", "eventOrTextValue", "maybePath", "parsed", "persist", "currentTarget", "id", "checked", "outerHTML", "options", "multiple", "warnAboutMissingIdentifier", "htmlContent", "documentationAnchorLink", "handlerName", "test", "parseFloat", "getValueForCheckbox", "getSelectedValues", "handleChange", "eventOrPath", "event", "setFieldTouched", "executeBlur", "handleBlur", "eventOrString", "setFormikState", "stateOrCb", "setStatus", "setSubmitting", "submitForm", "isInstanceOfError", "Error", "isActuallyValid", "promiseOrUndefined", "executeSubmit", "result", "_errors", "handleSubmit", "preventDefault", "stopPropagation", "HTMLButtonElement", "attributes", "getNamedItem", "reason", "validateForm", "handleReset", "getFieldMeta", "initialValue", "initialError", "getFieldHelpers", "setValue", "setError", "getFieldProps", "nameOrOptions", "isAnObject", "valueState", "onChange", "onBlur", "valueProp", "is", "as", "indexOf", "dirty", "isValid", "ctx", "Formik", "formikbag", "component", "render", "innerRef", "only", "yupError", "inner", "message", "sync", "context", "normalizedValues", "prepareDataForValidation", "abortEarly", "data", "hasOwnProperty", "isPlainObject", "source", "destination", "forEach", "merge", "cloneRequested", "shouldClone", "isMergeableObject", "push", "from", "el", "selected", "currentValue", "Boolean", "currentArrayOfValues", "isValueInArray", "concat", "useIsomorphicLayoutEffect", "window", "createElement", "fn", "ref", "args", "apply", "useField", "propsOrFieldName", "fieldName", "validateFn", "fieldHelpers", "Field", "className", "meta", "legacyBag", "form", "asElement", "Form", "_action", "withFormik", "mapPropsToValues", "vanillaProps", "config", "createFormik", "Component", "componentDisplayName", "constructor", "C", "actions", "renderFormComponent", "formikProps", "mapPropsToStatus", "mapPropsToErrors", "mapPropsToTouched", "hoistNonReactStatics", "connect", "Comp", "WrappedComponent", "move", "array", "to", "copy", "copyArrayLike", "splice", "swap", "arrayLike", "indexA", "indexB", "a", "insert", "replace", "maxIndex", "parseInt", "max", "createAlterationHandler", "alteration", "defaultFunction", "FieldArrayInner", "updateArrayField", "alterTouched", "alterErrors", "prevState", "updateErrors", "updateTouched", "fieldError", "fieldTouched", "cloneDeep", "handlePush", "handleSwap", "handleMove", "handleInsert", "handleReplace", "unshift", "arr", "handleUnshift", "handleRemove", "remove", "handlePop", "pop", "bind", "componentDidUpdate", "prevProps", "every", "v", "tmp", "arrayHelpers", "restOfFormik", "defaultProps", "FieldArray", "ErrorMessageImpl", "shouldComponentUpdate", "touch", "ErrorMessage", "FastFieldInner", "shouldUpdate", "componentDidMount", "componentWillUnmount", "bag", "FastField"]
}
