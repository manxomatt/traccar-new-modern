import {
  withStyles_default
} from "./chunk-6FS2JGV2.js";
import "./chunk-4IIGZDP2.js";
import "./chunk-DGAH7IWJ.js";
import {
  Fab_default,
  Grid_default,
  SnackbarContent_default,
  Snackbar_default
} from "./chunk-ZMXQNG3W.js";
import {
  Chip_default,
  IconButton_default
} from "./chunk-A4SPGCKO.js";
import {
  Dialog_default
} from "./chunk-BHLWRWKV.js";
import {
  DialogTitle_default
} from "./chunk-JQNXSAJM.js";
import "./chunk-UYJHYBSN.js";
import {
  DialogContent_default
} from "./chunk-VDUR4OVB.js";
import "./chunk-HKA7Z7JK.js";
import "./chunk-WMMVSIJG.js";
import "./chunk-N34SZ5ID.js";
import "./chunk-TJ4WWSAQ.js";
import {
  Typography_default
} from "./chunk-7F27IFKI.js";
import "./chunk-4ULATHZZ.js";
import "./chunk-FIXMYCXI.js";
import {
  Button_default
} from "./chunk-S3X2PDJC.js";
import "./chunk-GM4AMQHU.js";
import "./chunk-KE5OWTP5.js";
import "./chunk-OBIMC6IO.js";
import "./chunk-JULQHL6P.js";
import "./chunk-FMFFUJ5P.js";
import "./chunk-TNOTBLF6.js";
import {
  DialogActions_default
} from "./chunk-G5GIMD5D.js";
import {
  require_Error
} from "./chunk-BWUCCWIC.js";
import {
  require_Close
} from "./chunk-TSVBFNCH.js";
import {
  require_Delete
} from "./chunk-NRU7ICXQ.js";
import {
  require_createSvgIcon,
  require_interopRequireDefault
} from "./chunk-2FFF3EZR.js";
import "./chunk-KFKOVWP7.js";
import "./chunk-RWPPEHTY.js";
import "./chunk-WEZZ3B3N.js";
import "./chunk-XOBKZCHO.js";
import "./chunk-NB3J2TQD.js";
import "./chunk-4GPSBR6A.js";
import "./chunk-7KNHX4QD.js";
import "./chunk-25V3DBAA.js";
import "./chunk-6P4XLE47.js";
import "./chunk-LDIF5W5I.js";
import "./chunk-6FHV7GJG.js";
import "./chunk-7AC3SDQE.js";
import "./chunk-Z2AMUMOQ.js";
import "./chunk-DANDTANE.js";
import "./chunk-AVMHCSPC.js";
import "./chunk-FOHG5CYS.js";
import "./chunk-7AODU6ZJ.js";
import {
  require_prop_types
} from "./chunk-ILOM7M6T.js";
import "./chunk-ZSOXRXAO.js";
import "./chunk-V4FPG2S2.js";
import {
  require_jsx_runtime
} from "./chunk-53TI3G6C.js";
import "./chunk-ZSCNLU6M.js";
import {
  require_react
} from "./chunk-64YSJXBX.js";
import {
  __commonJS,
  __toESM
} from "./chunk-WGAPYIUP.js";

// node_modules/react-mui-dropzone/node_modules/@babel/runtime/helpers/typeof.js
var require_typeof = __commonJS({
  "node_modules/react-mui-dropzone/node_modules/@babel/runtime/helpers/typeof.js"(exports, module) {
    function _typeof2(o) {
      "@babel/helpers - typeof";
      return module.exports = _typeof2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
        return typeof o2;
      } : function(o2) {
        return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
      }, module.exports.__esModule = true, module.exports["default"] = module.exports, _typeof2(o);
    }
    module.exports = _typeof2, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/react-mui-dropzone/node_modules/@babel/runtime/helpers/regeneratorRuntime.js
var require_regeneratorRuntime = __commonJS({
  "node_modules/react-mui-dropzone/node_modules/@babel/runtime/helpers/regeneratorRuntime.js"(exports, module) {
    var _typeof2 = require_typeof()["default"];
    function _regeneratorRuntime2() {
      "use strict";
      module.exports = _regeneratorRuntime2 = function _regeneratorRuntime3() {
        return e;
      }, module.exports.__esModule = true, module.exports["default"] = module.exports;
      var t, e = {}, r2 = Object.prototype, n = r2.hasOwnProperty, o = Object.defineProperty || function(t2, e2, r3) {
        t2[e2] = r3.value;
      }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag";
      function define(t2, e2, r3) {
        return Object.defineProperty(t2, e2, {
          value: r3,
          enumerable: true,
          configurable: true,
          writable: true
        }), t2[e2];
      }
      try {
        define({}, "");
      } catch (t2) {
        define = function define2(t3, e2, r3) {
          return t3[e2] = r3;
        };
      }
      function wrap(t2, e2, r3, n2) {
        var i2 = e2 && e2.prototype instanceof Generator ? e2 : Generator, a2 = Object.create(i2.prototype), c2 = new Context(n2 || []);
        return o(a2, "_invoke", {
          value: makeInvokeMethod(t2, r3, c2)
        }), a2;
      }
      function tryCatch(t2, e2, r3) {
        try {
          return {
            type: "normal",
            arg: t2.call(e2, r3)
          };
        } catch (t3) {
          return {
            type: "throw",
            arg: t3
          };
        }
      }
      e.wrap = wrap;
      var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {};
      function Generator() {
      }
      function GeneratorFunction() {
      }
      function GeneratorFunctionPrototype() {
      }
      var p = {};
      define(p, a, function() {
        return this;
      });
      var d = Object.getPrototypeOf, v = d && d(d(values([])));
      v && v !== r2 && n.call(v, a) && (p = v);
      var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p);
      function defineIteratorMethods(t2) {
        ["next", "throw", "return"].forEach(function(e2) {
          define(t2, e2, function(t3) {
            return this._invoke(e2, t3);
          });
        });
      }
      function AsyncIterator(t2, e2) {
        function invoke(r4, o2, i2, a2) {
          var c2 = tryCatch(t2[r4], t2, o2);
          if ("throw" !== c2.type) {
            var u2 = c2.arg, h2 = u2.value;
            return h2 && "object" == _typeof2(h2) && n.call(h2, "__await") ? e2.resolve(h2.__await).then(function(t3) {
              invoke("next", t3, i2, a2);
            }, function(t3) {
              invoke("throw", t3, i2, a2);
            }) : e2.resolve(h2).then(function(t3) {
              u2.value = t3, i2(u2);
            }, function(t3) {
              return invoke("throw", t3, i2, a2);
            });
          }
          a2(c2.arg);
        }
        var r3;
        o(this, "_invoke", {
          value: function value(t3, n2) {
            function callInvokeWithMethodAndArg() {
              return new e2(function(e3, r4) {
                invoke(t3, n2, e3, r4);
              });
            }
            return r3 = r3 ? r3.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
          }
        });
      }
      function makeInvokeMethod(e2, r3, n2) {
        var o2 = h;
        return function(i2, a2) {
          if (o2 === f)
            throw new Error("Generator is already running");
          if (o2 === s) {
            if ("throw" === i2)
              throw a2;
            return {
              value: t,
              done: true
            };
          }
          for (n2.method = i2, n2.arg = a2; ; ) {
            var c2 = n2.delegate;
            if (c2) {
              var u2 = maybeInvokeDelegate(c2, n2);
              if (u2) {
                if (u2 === y)
                  continue;
                return u2;
              }
            }
            if ("next" === n2.method)
              n2.sent = n2._sent = n2.arg;
            else if ("throw" === n2.method) {
              if (o2 === h)
                throw o2 = s, n2.arg;
              n2.dispatchException(n2.arg);
            } else
              "return" === n2.method && n2.abrupt("return", n2.arg);
            o2 = f;
            var p2 = tryCatch(e2, r3, n2);
            if ("normal" === p2.type) {
              if (o2 = n2.done ? s : l, p2.arg === y)
                continue;
              return {
                value: p2.arg,
                done: n2.done
              };
            }
            "throw" === p2.type && (o2 = s, n2.method = "throw", n2.arg = p2.arg);
          }
        };
      }
      function maybeInvokeDelegate(e2, r3) {
        var n2 = r3.method, o2 = e2.iterator[n2];
        if (o2 === t)
          return r3.delegate = null, "throw" === n2 && e2.iterator["return"] && (r3.method = "return", r3.arg = t, maybeInvokeDelegate(e2, r3), "throw" === r3.method) || "return" !== n2 && (r3.method = "throw", r3.arg = new TypeError("The iterator does not provide a '" + n2 + "' method")), y;
        var i2 = tryCatch(o2, e2.iterator, r3.arg);
        if ("throw" === i2.type)
          return r3.method = "throw", r3.arg = i2.arg, r3.delegate = null, y;
        var a2 = i2.arg;
        return a2 ? a2.done ? (r3[e2.resultName] = a2.value, r3.next = e2.nextLoc, "return" !== r3.method && (r3.method = "next", r3.arg = t), r3.delegate = null, y) : a2 : (r3.method = "throw", r3.arg = new TypeError("iterator result is not an object"), r3.delegate = null, y);
      }
      function pushTryEntry(t2) {
        var e2 = {
          tryLoc: t2[0]
        };
        1 in t2 && (e2.catchLoc = t2[1]), 2 in t2 && (e2.finallyLoc = t2[2], e2.afterLoc = t2[3]), this.tryEntries.push(e2);
      }
      function resetTryEntry(t2) {
        var e2 = t2.completion || {};
        e2.type = "normal", delete e2.arg, t2.completion = e2;
      }
      function Context(t2) {
        this.tryEntries = [{
          tryLoc: "root"
        }], t2.forEach(pushTryEntry, this), this.reset(true);
      }
      function values(e2) {
        if (e2 || "" === e2) {
          var r3 = e2[a];
          if (r3)
            return r3.call(e2);
          if ("function" == typeof e2.next)
            return e2;
          if (!isNaN(e2.length)) {
            var o2 = -1, i2 = function next() {
              for (; ++o2 < e2.length; )
                if (n.call(e2, o2))
                  return next.value = e2[o2], next.done = false, next;
              return next.value = t, next.done = true, next;
            };
            return i2.next = i2;
          }
        }
        throw new TypeError(_typeof2(e2) + " is not iterable");
      }
      return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", {
        value: GeneratorFunctionPrototype,
        configurable: true
      }), o(GeneratorFunctionPrototype, "constructor", {
        value: GeneratorFunction,
        configurable: true
      }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function(t2) {
        var e2 = "function" == typeof t2 && t2.constructor;
        return !!e2 && (e2 === GeneratorFunction || "GeneratorFunction" === (e2.displayName || e2.name));
      }, e.mark = function(t2) {
        return Object.setPrototypeOf ? Object.setPrototypeOf(t2, GeneratorFunctionPrototype) : (t2.__proto__ = GeneratorFunctionPrototype, define(t2, u, "GeneratorFunction")), t2.prototype = Object.create(g), t2;
      }, e.awrap = function(t2) {
        return {
          __await: t2
        };
      }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function() {
        return this;
      }), e.AsyncIterator = AsyncIterator, e.async = function(t2, r3, n2, o2, i2) {
        void 0 === i2 && (i2 = Promise);
        var a2 = new AsyncIterator(wrap(t2, r3, n2, o2), i2);
        return e.isGeneratorFunction(r3) ? a2 : a2.next().then(function(t3) {
          return t3.done ? t3.value : a2.next();
        });
      }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function() {
        return this;
      }), define(g, "toString", function() {
        return "[object Generator]";
      }), e.keys = function(t2) {
        var e2 = Object(t2), r3 = [];
        for (var n2 in e2)
          r3.push(n2);
        return r3.reverse(), function next() {
          for (; r3.length; ) {
            var t3 = r3.pop();
            if (t3 in e2)
              return next.value = t3, next.done = false, next;
          }
          return next.done = true, next;
        };
      }, e.values = values, Context.prototype = {
        constructor: Context,
        reset: function reset(e2) {
          if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = false, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e2)
            for (var r3 in this)
              "t" === r3.charAt(0) && n.call(this, r3) && !isNaN(+r3.slice(1)) && (this[r3] = t);
        },
        stop: function stop() {
          this.done = true;
          var t2 = this.tryEntries[0].completion;
          if ("throw" === t2.type)
            throw t2.arg;
          return this.rval;
        },
        dispatchException: function dispatchException(e2) {
          if (this.done)
            throw e2;
          var r3 = this;
          function handle(n2, o3) {
            return a2.type = "throw", a2.arg = e2, r3.next = n2, o3 && (r3.method = "next", r3.arg = t), !!o3;
          }
          for (var o2 = this.tryEntries.length - 1; o2 >= 0; --o2) {
            var i2 = this.tryEntries[o2], a2 = i2.completion;
            if ("root" === i2.tryLoc)
              return handle("end");
            if (i2.tryLoc <= this.prev) {
              var c2 = n.call(i2, "catchLoc"), u2 = n.call(i2, "finallyLoc");
              if (c2 && u2) {
                if (this.prev < i2.catchLoc)
                  return handle(i2.catchLoc, true);
                if (this.prev < i2.finallyLoc)
                  return handle(i2.finallyLoc);
              } else if (c2) {
                if (this.prev < i2.catchLoc)
                  return handle(i2.catchLoc, true);
              } else {
                if (!u2)
                  throw new Error("try statement without catch or finally");
                if (this.prev < i2.finallyLoc)
                  return handle(i2.finallyLoc);
              }
            }
          }
        },
        abrupt: function abrupt(t2, e2) {
          for (var r3 = this.tryEntries.length - 1; r3 >= 0; --r3) {
            var o2 = this.tryEntries[r3];
            if (o2.tryLoc <= this.prev && n.call(o2, "finallyLoc") && this.prev < o2.finallyLoc) {
              var i2 = o2;
              break;
            }
          }
          i2 && ("break" === t2 || "continue" === t2) && i2.tryLoc <= e2 && e2 <= i2.finallyLoc && (i2 = null);
          var a2 = i2 ? i2.completion : {};
          return a2.type = t2, a2.arg = e2, i2 ? (this.method = "next", this.next = i2.finallyLoc, y) : this.complete(a2);
        },
        complete: function complete(t2, e2) {
          if ("throw" === t2.type)
            throw t2.arg;
          return "break" === t2.type || "continue" === t2.type ? this.next = t2.arg : "return" === t2.type ? (this.rval = this.arg = t2.arg, this.method = "return", this.next = "end") : "normal" === t2.type && e2 && (this.next = e2), y;
        },
        finish: function finish(t2) {
          for (var e2 = this.tryEntries.length - 1; e2 >= 0; --e2) {
            var r3 = this.tryEntries[e2];
            if (r3.finallyLoc === t2)
              return this.complete(r3.completion, r3.afterLoc), resetTryEntry(r3), y;
          }
        },
        "catch": function _catch(t2) {
          for (var e2 = this.tryEntries.length - 1; e2 >= 0; --e2) {
            var r3 = this.tryEntries[e2];
            if (r3.tryLoc === t2) {
              var n2 = r3.completion;
              if ("throw" === n2.type) {
                var o2 = n2.arg;
                resetTryEntry(r3);
              }
              return o2;
            }
          }
          throw new Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(e2, r3, n2) {
          return this.delegate = {
            iterator: values(e2),
            resultName: r3,
            nextLoc: n2
          }, "next" === this.method && (this.arg = t), y;
        }
      }, e;
    }
    module.exports = _regeneratorRuntime2, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/react-mui-dropzone/node_modules/@babel/runtime/regenerator/index.js
var require_regenerator = __commonJS({
  "node_modules/react-mui-dropzone/node_modules/@babel/runtime/regenerator/index.js"(exports, module) {
    var runtime = require_regeneratorRuntime()();
    module.exports = runtime;
    try {
      regeneratorRuntime = runtime;
    } catch (accidentalStrictMode) {
      if (typeof globalThis === "object") {
        globalThis.regeneratorRuntime = runtime;
      } else {
        Function("r", "regeneratorRuntime = r")(runtime);
      }
    }
  }
});

// node_modules/@mui/icons-material/AttachFile.js
var require_AttachFile = __commonJS({
  "node_modules/@mui/icons-material/AttachFile.js"(exports) {
    "use strict";
    "use client";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _createSvgIcon = _interopRequireDefault(require_createSvgIcon());
    var _jsxRuntime = require_jsx_runtime();
    var _default = exports.default = (0, _createSvgIcon.default)((0, _jsxRuntime.jsx)("path", {
      d: "M16.5 6v11.5c0 2.21-1.79 4-4 4s-4-1.79-4-4V5c0-1.38 1.12-2.5 2.5-2.5s2.5 1.12 2.5 2.5v10.5c0 .55-.45 1-1 1s-1-.45-1-1V6H10v9.5c0 1.38 1.12 2.5 2.5 2.5s2.5-1.12 2.5-2.5V5c0-2.21-1.79-4-4-4S7 2.79 7 5v12.5c0 3.04 2.46 5.5 5.5 5.5s5.5-2.46 5.5-5.5V6z"
    }), "AttachFile");
  }
});

// node_modules/@mui/icons-material/CloudUpload.js
var require_CloudUpload = __commonJS({
  "node_modules/@mui/icons-material/CloudUpload.js"(exports) {
    "use strict";
    "use client";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _createSvgIcon = _interopRequireDefault(require_createSvgIcon());
    var _jsxRuntime = require_jsx_runtime();
    var _default = exports.default = (0, _createSvgIcon.default)((0, _jsxRuntime.jsx)("path", {
      d: "M19.35 10.04C18.67 6.59 15.64 4 12 4 9.11 4 6.6 5.64 5.35 8.04 2.34 8.36 0 10.91 0 14c0 3.31 2.69 6 6 6h13c2.76 0 5-2.24 5-5 0-2.64-2.05-4.78-4.65-4.96M14 13v4h-4v-4H7l5-5 5 5z"
    }), "CloudUpload");
  }
});

// node_modules/attr-accept/dist/es/index.js
var require_es = __commonJS({
  "node_modules/attr-accept/dist/es/index.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.default = function(file, acceptedFiles) {
      if (file && acceptedFiles) {
        var acceptedFilesArray = Array.isArray(acceptedFiles) ? acceptedFiles : acceptedFiles.split(",");
        var fileName = file.name || "";
        var mimeType = (file.type || "").toLowerCase();
        var baseMimeType = mimeType.replace(/\/.*$/, "");
        return acceptedFilesArray.some(function(type) {
          var validType = type.trim().toLowerCase();
          if (validType.charAt(0) === ".") {
            return fileName.toLowerCase().endsWith(validType);
          } else if (validType.endsWith("/*")) {
            return baseMimeType === validType.replace(/\/.*$/, "");
          }
          return mimeType === validType;
        });
      }
      return true;
    };
  }
});

// node_modules/@mui/icons-material/CheckCircle.js
var require_CheckCircle = __commonJS({
  "node_modules/@mui/icons-material/CheckCircle.js"(exports) {
    "use strict";
    "use client";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _createSvgIcon = _interopRequireDefault(require_createSvgIcon());
    var _jsxRuntime = require_jsx_runtime();
    var _default = exports.default = (0, _createSvgIcon.default)((0, _jsxRuntime.jsx)("path", {
      d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2m-2 15-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8z"
    }), "CheckCircle");
  }
});

// node_modules/@mui/icons-material/Info.js
var require_Info = __commonJS({
  "node_modules/@mui/icons-material/Info.js"(exports) {
    "use strict";
    "use client";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _createSvgIcon = _interopRequireDefault(require_createSvgIcon());
    var _jsxRuntime = require_jsx_runtime();
    var _default = exports.default = (0, _createSvgIcon.default)((0, _jsxRuntime.jsx)("path", {
      d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2m1 15h-2v-6h2zm0-8h-2V7h2z"
    }), "Info");
  }
});

// node_modules/@mui/icons-material/Warning.js
var require_Warning = __commonJS({
  "node_modules/@mui/icons-material/Warning.js"(exports) {
    "use strict";
    "use client";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _createSvgIcon = _interopRequireDefault(require_createSvgIcon());
    var _jsxRuntime = require_jsx_runtime();
    var _default = exports.default = (0, _createSvgIcon.default)((0, _jsxRuntime.jsx)("path", {
      d: "M1 21h22L12 2zm12-3h-2v-2h2zm0-4h-2v-4h2z"
    }), "Warning");
  }
});

// node_modules/react-mui-dropzone/node_modules/@babel/runtime/helpers/esm/extends.js
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}

// node_modules/react-mui-dropzone/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js
function _arrayWithHoles(arr) {
  if (Array.isArray(arr))
    return arr;
}

// node_modules/react-mui-dropzone/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js
function _iterableToArrayLimit(r2, l) {
  var t = null == r2 ? null : "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
  if (null != t) {
    var e, n, i, u, a = [], f = true, o = false;
    try {
      if (i = (t = t.call(r2)).next, 0 === l) {
        if (Object(t) !== t)
          return;
        f = false;
      } else
        for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = true)
          ;
    } catch (r3) {
      o = true, n = r3;
    } finally {
      try {
        if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u))
          return;
      } finally {
        if (o)
          throw n;
      }
    }
    return a;
  }
}

// node_modules/react-mui-dropzone/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}

// node_modules/react-mui-dropzone/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}

// node_modules/react-mui-dropzone/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

// node_modules/react-mui-dropzone/node_modules/@babel/runtime/helpers/esm/slicedToArray.js
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

// node_modules/react-mui-dropzone/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }
  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}
function _asyncToGenerator(fn) {
  return function() {
    var self = this, args = arguments;
    return new Promise(function(resolve, reject) {
      var gen = fn.apply(self, args);
      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }
      _next(void 0);
    });
  };
}

// node_modules/react-mui-dropzone/node_modules/@babel/runtime/helpers/esm/classCallCheck.js
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

// node_modules/react-mui-dropzone/node_modules/@babel/runtime/helpers/esm/typeof.js
function _typeof(o) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
    return typeof o2;
  } : function(o2) {
    return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
  }, _typeof(o);
}

// node_modules/react-mui-dropzone/node_modules/@babel/runtime/helpers/esm/toPrimitive.js
function toPrimitive(t, r2) {
  if ("object" != _typeof(t) || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r2 || "default");
    if ("object" != _typeof(i))
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r2 ? String : Number)(t);
}

// node_modules/react-mui-dropzone/node_modules/@babel/runtime/helpers/esm/toPropertyKey.js
function toPropertyKey(t) {
  var i = toPrimitive(t, "string");
  return "symbol" == _typeof(i) ? i : String(i);
}

// node_modules/react-mui-dropzone/node_modules/@babel/runtime/helpers/esm/createClass.js
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, toPropertyKey(descriptor.key), descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

// node_modules/react-mui-dropzone/node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf(o, p);
}

// node_modules/react-mui-dropzone/node_modules/@babel/runtime/helpers/esm/inherits.js
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass)
    _setPrototypeOf(subClass, superClass);
}

// node_modules/react-mui-dropzone/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js
function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}

// node_modules/react-mui-dropzone/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js
function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized(self);
}

// node_modules/react-mui-dropzone/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf(o);
}

// node_modules/react-mui-dropzone/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}

// node_modules/react-mui-dropzone/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js
function _objectWithoutProperties(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}

// node_modules/react-mui-dropzone/dist/index.es.js
var import_regenerator = __toESM(require_regenerator());
var import_prop_types2 = __toESM(require_prop_types());
var import_react2 = __toESM(require_react());
var import_AttachFile = __toESM(require_AttachFile());
var import_CloudUpload = __toESM(require_CloudUpload());

// node_modules/react-mui-dropzone/node_modules/clsx/dist/clsx.m.js
function r(e) {
  var t, f, n = "";
  if ("string" == typeof e || "number" == typeof e)
    n += e;
  else if ("object" == typeof e)
    if (Array.isArray(e))
      for (t = 0; t < e.length; t++)
        e[t] && (f = r(e[t])) && (n && (n += " "), n += f);
    else
      for (t in e)
        e[t] && (n && (n += " "), n += t);
  return n;
}
function clsx() {
  for (var e, t, f = 0, n = ""; f < arguments.length; )
    (e = arguments[f++]) && (t = r(e)) && (n && (n += " "), n += t);
  return n;
}
var clsx_m_default = clsx;

// node_modules/react-dropzone/dist/es/index.js
var import_react = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());

// node_modules/tslib/tslib.es6.mjs
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r2, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r2 = i.next()).done)
      ar.push(r2.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r2 && !r2.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}
function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++)
    ar = ar.concat(__read(arguments[i]));
  return ar;
}

// node_modules/file-selector/dist/es5/file.js
var COMMON_MIME_TYPES = /* @__PURE__ */ new Map([
  ["avi", "video/avi"],
  ["gif", "image/gif"],
  ["ico", "image/x-icon"],
  ["jpeg", "image/jpeg"],
  ["jpg", "image/jpeg"],
  ["mkv", "video/x-matroska"],
  ["mov", "video/quicktime"],
  ["mp4", "video/mp4"],
  ["pdf", "application/pdf"],
  ["png", "image/png"],
  ["zip", "application/zip"],
  ["doc", "application/msword"],
  ["docx", "application/vnd.openxmlformats-officedocument.wordprocessingml.document"]
]);
function toFileWithPath(file, path) {
  var f = withMimeType(file);
  if (typeof f.path !== "string") {
    var webkitRelativePath = file.webkitRelativePath;
    Object.defineProperty(f, "path", {
      value: typeof path === "string" ? path : typeof webkitRelativePath === "string" && webkitRelativePath.length > 0 ? webkitRelativePath : file.name,
      writable: false,
      configurable: false,
      enumerable: true
    });
  }
  return f;
}
function withMimeType(file) {
  var name = file.name;
  var hasExtension = name && name.lastIndexOf(".") !== -1;
  if (hasExtension && !file.type) {
    var ext = name.split(".").pop().toLowerCase();
    var type = COMMON_MIME_TYPES.get(ext);
    if (type) {
      Object.defineProperty(file, "type", {
        value: type,
        writable: false,
        configurable: false,
        enumerable: true
      });
    }
  }
  return file;
}

// node_modules/file-selector/dist/es5/file-selector.js
var FILES_TO_IGNORE = [
  // Thumbnail cache files for macOS and Windows
  ".DS_Store",
  "Thumbs.db"
  // Windows
];
function fromEvent(evt) {
  return __awaiter(this, void 0, void 0, function() {
    return __generator(this, function(_a) {
      return [2, isDragEvt(evt) && evt.dataTransfer ? getDataTransferFiles(evt.dataTransfer, evt.type) : getInputFiles(evt)];
    });
  });
}
function isDragEvt(value) {
  return !!value.dataTransfer;
}
function getInputFiles(evt) {
  var files = isInput(evt.target) ? evt.target.files ? fromList(evt.target.files) : [] : [];
  return files.map(function(file) {
    return toFileWithPath(file);
  });
}
function isInput(value) {
  return value !== null;
}
function getDataTransferFiles(dt, type) {
  return __awaiter(this, void 0, void 0, function() {
    var items, files;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (!dt.items)
            return [3, 2];
          items = fromList(dt.items).filter(function(item) {
            return item.kind === "file";
          });
          if (type !== "drop") {
            return [2, items];
          }
          return [4, Promise.all(items.map(toFilePromises))];
        case 1:
          files = _a.sent();
          return [2, noIgnoredFiles(flatten(files))];
        case 2:
          return [2, noIgnoredFiles(fromList(dt.files).map(function(file) {
            return toFileWithPath(file);
          }))];
      }
    });
  });
}
function noIgnoredFiles(files) {
  return files.filter(function(file) {
    return FILES_TO_IGNORE.indexOf(file.name) === -1;
  });
}
function fromList(items) {
  var files = [];
  for (var i = 0; i < items.length; i++) {
    var file = items[i];
    files.push(file);
  }
  return files;
}
function toFilePromises(item) {
  if (typeof item.webkitGetAsEntry !== "function") {
    return fromDataTransferItem(item);
  }
  var entry = item.webkitGetAsEntry();
  if (entry && entry.isDirectory) {
    return fromDirEntry(entry);
  }
  return fromDataTransferItem(item);
}
function flatten(items) {
  return items.reduce(function(acc, files) {
    return __spread(acc, Array.isArray(files) ? flatten(files) : [files]);
  }, []);
}
function fromDataTransferItem(item) {
  var file = item.getAsFile();
  if (!file) {
    return Promise.reject(item + " is not a File");
  }
  var fwp = toFileWithPath(file);
  return Promise.resolve(fwp);
}
function fromEntry(entry) {
  return __awaiter(this, void 0, void 0, function() {
    return __generator(this, function(_a) {
      return [2, entry.isDirectory ? fromDirEntry(entry) : fromFileEntry(entry)];
    });
  });
}
function fromDirEntry(entry) {
  var reader = entry.createReader();
  return new Promise(function(resolve, reject) {
    var entries = [];
    function readEntries() {
      var _this = this;
      reader.readEntries(function(batch) {
        return __awaiter(_this, void 0, void 0, function() {
          var files, err_1, items;
          return __generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                if (!!batch.length)
                  return [3, 5];
                _a.label = 1;
              case 1:
                _a.trys.push([1, 3, , 4]);
                return [4, Promise.all(entries)];
              case 2:
                files = _a.sent();
                resolve(files);
                return [3, 4];
              case 3:
                err_1 = _a.sent();
                reject(err_1);
                return [3, 4];
              case 4:
                return [3, 6];
              case 5:
                items = Promise.all(batch.map(fromEntry));
                entries.push(items);
                readEntries();
                _a.label = 6;
              case 6:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      }, function(err) {
        reject(err);
      });
    }
    readEntries();
  });
}
function fromFileEntry(entry) {
  return __awaiter(this, void 0, void 0, function() {
    return __generator(this, function(_a) {
      return [2, new Promise(function(resolve, reject) {
        entry.file(function(file) {
          var fwp = toFileWithPath(file, entry.fullPath);
          resolve(fwp);
        }, function(err) {
          reject(err);
        });
      })];
    });
  });
}

// node_modules/react-dropzone/dist/es/utils/index.js
var import_attr_accept = __toESM(require_es());
function fileAccepted(file, accept) {
  return file.type === "application/x-moz-file" || (0, import_attr_accept.default)(file, accept);
}
function fileMatchSize(file, minSize, maxSize) {
  if (isDefined(file.size)) {
    if (isDefined(minSize) && isDefined(maxSize))
      return file.size >= minSize && file.size <= maxSize;
    else if (isDefined(minSize))
      return file.size >= minSize;
    else if (isDefined(maxSize))
      return file.size <= maxSize;
  }
  return true;
}
function isDefined(value) {
  return value !== void 0 && value !== null;
}
function allFilesAccepted(_ref) {
  var files = _ref.files, accept = _ref.accept, minSize = _ref.minSize, maxSize = _ref.maxSize, multiple = _ref.multiple;
  if (!multiple && files.length > 1) {
    return false;
  }
  return files.every(function(file) {
    return fileAccepted(file, accept) && fileMatchSize(file, minSize, maxSize);
  });
}
function isPropagationStopped(event2) {
  if (typeof event2.isPropagationStopped === "function") {
    return event2.isPropagationStopped();
  } else if (typeof event2.cancelBubble !== "undefined") {
    return event2.cancelBubble;
  }
  return false;
}
function isEvtWithFiles(event2) {
  if (!event2.dataTransfer) {
    return !!event2.target && !!event2.target.files;
  }
  return Array.prototype.some.call(event2.dataTransfer.types, function(type) {
    return type === "Files" || type === "application/x-moz-file";
  });
}
function onDocumentDragOver(event2) {
  event2.preventDefault();
}
function isIe(userAgent) {
  return userAgent.indexOf("MSIE") !== -1 || userAgent.indexOf("Trident/") !== -1;
}
function isEdge(userAgent) {
  return userAgent.indexOf("Edge/") !== -1;
}
function isIeOrEdge() {
  var userAgent = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : window.navigator.userAgent;
  return isIe(userAgent) || isEdge(userAgent);
}
function composeEventHandlers() {
  for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {
    fns[_key] = arguments[_key];
  }
  return function(event2) {
    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }
    return fns.some(function(fn) {
      if (!isPropagationStopped(event2) && fn) {
        fn.apply(void 0, [event2].concat(args));
      }
      return isPropagationStopped(event2);
    });
  };
}

// node_modules/react-dropzone/dist/es/index.js
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}
function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]")
    return Array.from(iter);
}
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }
    return arr2;
  }
}
function _slicedToArray2(arr, i) {
  return _arrayWithHoles2(arr) || _iterableToArrayLimit2(arr, i) || _nonIterableRest2();
}
function _nonIterableRest2() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}
function _iterableToArrayLimit2(arr, i) {
  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) {
    return;
  }
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = void 0;
  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles2(arr) {
  if (Array.isArray(arr))
    return arr;
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys(source, true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(source).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _objectWithoutProperties2(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose2(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose2(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var Dropzone = (0, import_react.forwardRef)(function(_ref, ref) {
  var children = _ref.children, params = _objectWithoutProperties2(_ref, ["children"]);
  var _useDropzone = useDropzone(params), open = _useDropzone.open, props = _objectWithoutProperties2(_useDropzone, ["open"]);
  (0, import_react.useImperativeHandle)(ref, function() {
    return {
      open
    };
  }, [open]);
  return import_react.default.createElement(import_react.Fragment, null, children(_objectSpread({}, props, {
    open
  })));
});
Dropzone.displayName = "Dropzone";
Dropzone.propTypes = {
  /**
   * Render function that exposes the dropzone state and prop getter fns
   *
   * @param {object} params
   * @param {Function} params.getRootProps Returns the props you should apply to the root drop container you render
   * @param {Function} params.getInputProps Returns the props you should apply to hidden file input you render
   * @param {Function} params.open Open the native file selection dialog
   * @param {boolean} params.isFocused Dropzone area is in focus
   * @param {boolean} params.isFileDialogActive File dialog is opened
   * @param {boolean} params.isDragActive Active drag is in progress
   * @param {boolean} params.isDragAccept Dragged files are accepted
   * @param {boolean} params.isDragReject Some dragged files are rejected
   * @param {File[]} params.draggedFiles Files in active drag
   * @param {File[]} params.acceptedFiles Accepted files
   * @param {File[]} params.rejectedFiles Rejected files
   */
  children: import_prop_types.default.func,
  /**
   * Set accepted file types.
   * See https://github.com/okonet/attr-accept for more information.
   * Keep in mind that mime type determination is not reliable across platforms. CSV files,
   * for example, are reported as text/plain under macOS but as application/vnd.ms-excel under
   * Windows. In some cases there might not be a mime type set at all.
   * See: https://github.com/react-dropzone/react-dropzone/issues/276
   */
  accept: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.arrayOf(import_prop_types.default.string)]),
  /**
   * Allow drag 'n' drop (or selection from the file dialog) of multiple files
   */
  multiple: import_prop_types.default.bool,
  /**
   * If false, allow dropped items to take over the current browser window
   */
  preventDropOnDocument: import_prop_types.default.bool,
  /**
   * If true, disables click to open the native file selection dialog
   */
  noClick: import_prop_types.default.bool,
  /**
   * If true, disables SPACE/ENTER to open the native file selection dialog.
   * Note that it also stops tracking the focus state.
   */
  noKeyboard: import_prop_types.default.bool,
  /**
   * If true, disables drag 'n' drop
   */
  noDrag: import_prop_types.default.bool,
  /**
   * If true, stops drag event propagation to parents
   */
  noDragEventsBubbling: import_prop_types.default.bool,
  /**
   * Minimum file size (in bytes)
   */
  minSize: import_prop_types.default.number,
  /**
   * Maximum file size (in bytes)
   */
  maxSize: import_prop_types.default.number,
  /**
   * Enable/disable the dropzone
   */
  disabled: import_prop_types.default.bool,
  /**
   * Use this to provide a custom file aggregator
   *
   * @param {(DragEvent|Event)} event A drag event or input change event (if files were selected via the file dialog)
   */
  getFilesFromEvent: import_prop_types.default.func,
  /**
   * Cb for when closing the file dialog with no selection
   */
  onFileDialogCancel: import_prop_types.default.func,
  /**
   * Cb for when the `dragenter` event occurs.
   *
   * @param {DragEvent} event
   */
  onDragEnter: import_prop_types.default.func,
  /**
   * Cb for when the `dragleave` event occurs
   *
   * @param {DragEvent} event
   */
  onDragLeave: import_prop_types.default.func,
  /**
   * Cb for when the `dragover` event occurs
   *
   * @param {DragEvent} event
   */
  onDragOver: import_prop_types.default.func,
  /**
   * Cb for when the `drop` event occurs.
   * Note that this callback is invoked after the `getFilesFromEvent` callback is done.
   *
   * Files are accepted or rejected based on the `accept`, `multiple`, `minSize` and `maxSize` props.
   * `accept` must be a valid [MIME type](http://www.iana.org/assignments/media-types/media-types.xhtml) according to [input element specification](https://www.w3.org/wiki/HTML/Elements/input/file) or a valid file extension.
   * If `multiple` is set to false and additional files are droppped,
   * all files besides the first will be rejected.
   * Any file which does not have a size in the [`minSize`, `maxSize`] range, will be rejected as well.
   *
   * Note that the `onDrop` callback will always be invoked regardless if the dropped files were accepted or rejected.
   * If you'd like to react to a specific scenario, use the `onDropAccepted`/`onDropRejected` props.
   *
   * `onDrop` will provide you with an array of [File](https://developer.mozilla.org/en-US/docs/Web/API/File) objects which you can then process and send to a server.
   * For example, with [SuperAgent](https://github.com/visionmedia/superagent) as a http/ajax library:
   *
   * ```js
   * function onDrop(acceptedFiles) {
   *   const req = request.post('/upload')
   *   acceptedFiles.forEach(file => {
   *     req.attach(file.name, file)
   *   })
   *   req.end(callback)
   * }
   * ```
   *
   * @param {File[]} acceptedFiles
   * @param {File[]} rejectedFiles
   * @param {(DragEvent|Event)} event A drag event or input change event (if files were selected via the file dialog)
   */
  onDrop: import_prop_types.default.func,
  /**
   * Cb for when the `drop` event occurs.
   * Note that if no files are accepted, this callback is not invoked.
   *
   * @param {File[]} files
   * @param {(DragEvent|Event)} event
   */
  onDropAccepted: import_prop_types.default.func,
  /**
   * Cb for when the `drop` event occurs.
   * Note that if no files are rejected, this callback is not invoked.
   *
   * @param {object[]} files
   * @param {(DragEvent|Event)} event
   */
  onDropRejected: import_prop_types.default.func
};
var es_default = Dropzone;
var initialState = {
  isFocused: false,
  isFileDialogActive: false,
  isDragActive: false,
  isDragAccept: false,
  isDragReject: false,
  draggedFiles: [],
  acceptedFiles: [],
  rejectedFiles: []
};
function useDropzone() {
  var _ref2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, accept = _ref2.accept, _ref2$disabled = _ref2.disabled, disabled = _ref2$disabled === void 0 ? false : _ref2$disabled, _ref2$getFilesFromEve = _ref2.getFilesFromEvent, getFilesFromEvent = _ref2$getFilesFromEve === void 0 ? fromEvent : _ref2$getFilesFromEve, _ref2$maxSize = _ref2.maxSize, maxSize = _ref2$maxSize === void 0 ? Infinity : _ref2$maxSize, _ref2$minSize = _ref2.minSize, minSize = _ref2$minSize === void 0 ? 0 : _ref2$minSize, _ref2$multiple = _ref2.multiple, multiple = _ref2$multiple === void 0 ? true : _ref2$multiple, onDragEnter = _ref2.onDragEnter, onDragLeave = _ref2.onDragLeave, onDragOver = _ref2.onDragOver, onDrop = _ref2.onDrop, onDropAccepted = _ref2.onDropAccepted, onDropRejected = _ref2.onDropRejected, onFileDialogCancel = _ref2.onFileDialogCancel, _ref2$preventDropOnDo = _ref2.preventDropOnDocument, preventDropOnDocument = _ref2$preventDropOnDo === void 0 ? true : _ref2$preventDropOnDo, _ref2$noClick = _ref2.noClick, noClick = _ref2$noClick === void 0 ? false : _ref2$noClick, _ref2$noKeyboard = _ref2.noKeyboard, noKeyboard = _ref2$noKeyboard === void 0 ? false : _ref2$noKeyboard, _ref2$noDrag = _ref2.noDrag, noDrag = _ref2$noDrag === void 0 ? false : _ref2$noDrag, _ref2$noDragEventsBub = _ref2.noDragEventsBubbling, noDragEventsBubbling = _ref2$noDragEventsBub === void 0 ? false : _ref2$noDragEventsBub;
  var rootRef = (0, import_react.useRef)(null);
  var inputRef = (0, import_react.useRef)(null);
  var _useReducer = (0, import_react.useReducer)(reducer, initialState), _useReducer2 = _slicedToArray2(_useReducer, 2), state = _useReducer2[0], dispatch = _useReducer2[1];
  var isFocused = state.isFocused, isFileDialogActive = state.isFileDialogActive, draggedFiles = state.draggedFiles;
  var openFileDialog = (0, import_react.useCallback)(function() {
    if (inputRef.current) {
      dispatch({
        type: "openDialog"
      });
      inputRef.current.value = null;
      inputRef.current.click();
    }
  }, [dispatch]);
  var onWindowFocus = function onWindowFocus2() {
    if (isFileDialogActive) {
      setTimeout(function() {
        if (inputRef.current) {
          var files = inputRef.current.files;
          if (!files.length) {
            dispatch({
              type: "closeDialog"
            });
            if (typeof onFileDialogCancel === "function") {
              onFileDialogCancel();
            }
          }
        }
      }, 300);
    }
  };
  (0, import_react.useEffect)(function() {
    window.addEventListener("focus", onWindowFocus, false);
    return function() {
      window.removeEventListener("focus", onWindowFocus, false);
    };
  }, [inputRef, isFileDialogActive, onFileDialogCancel]);
  var onKeyDownCb = (0, import_react.useCallback)(function(event2) {
    if (!rootRef.current || !rootRef.current.isEqualNode(event2.target)) {
      return;
    }
    if (event2.keyCode === 32 || event2.keyCode === 13) {
      event2.preventDefault();
      openFileDialog();
    }
  }, [rootRef, inputRef]);
  var onFocusCb = (0, import_react.useCallback)(function() {
    dispatch({
      type: "focus"
    });
  }, []);
  var onBlurCb = (0, import_react.useCallback)(function() {
    dispatch({
      type: "blur"
    });
  }, []);
  var onClickCb = (0, import_react.useCallback)(function() {
    if (noClick) {
      return;
    }
    if (isIeOrEdge()) {
      setTimeout(openFileDialog, 0);
    } else {
      openFileDialog();
    }
  }, [inputRef, noClick]);
  var dragTargetsRef = (0, import_react.useRef)([]);
  var onDocumentDrop = function onDocumentDrop2(event2) {
    if (rootRef.current && rootRef.current.contains(event2.target)) {
      return;
    }
    event2.preventDefault();
    dragTargetsRef.current = [];
  };
  (0, import_react.useEffect)(function() {
    if (preventDropOnDocument) {
      document.addEventListener("dragover", onDocumentDragOver, false);
      document.addEventListener("drop", onDocumentDrop, false);
    }
    return function() {
      if (preventDropOnDocument) {
        document.removeEventListener("dragover", onDocumentDragOver);
        document.removeEventListener("drop", onDocumentDrop);
      }
    };
  }, [rootRef, preventDropOnDocument]);
  var onDragEnterCb = (0, import_react.useCallback)(function(event2) {
    event2.preventDefault();
    event2.persist();
    stopPropagation(event2);
    if (dragTargetsRef.current.indexOf(event2.target) === -1) {
      dragTargetsRef.current = [].concat(_toConsumableArray(dragTargetsRef.current), [event2.target]);
    }
    if (isEvtWithFiles(event2)) {
      Promise.resolve(getFilesFromEvent(event2)).then(function(draggedFiles2) {
        if (isPropagationStopped(event2) && !noDragEventsBubbling) {
          return;
        }
        dispatch({
          draggedFiles: draggedFiles2,
          isDragActive: true,
          type: "setDraggedFiles"
        });
        if (onDragEnter) {
          onDragEnter(event2);
        }
      });
    }
  }, [getFilesFromEvent, onDragEnter, noDragEventsBubbling]);
  var onDragOverCb = (0, import_react.useCallback)(function(event2) {
    event2.preventDefault();
    event2.persist();
    stopPropagation(event2);
    if (event2.dataTransfer) {
      try {
        event2.dataTransfer.dropEffect = "copy";
      } catch (_unused) {
      }
    }
    if (isEvtWithFiles(event2) && onDragOver) {
      onDragOver(event2);
    }
    return false;
  }, [onDragOver, noDragEventsBubbling]);
  var onDragLeaveCb = (0, import_react.useCallback)(function(event2) {
    event2.preventDefault();
    event2.persist();
    stopPropagation(event2);
    var targets = dragTargetsRef.current.filter(function(target) {
      return target !== event2.target && rootRef.current && rootRef.current.contains(target);
    });
    dragTargetsRef.current = targets;
    if (targets.length > 0) {
      return;
    }
    dispatch({
      isDragActive: false,
      type: "setDraggedFiles",
      draggedFiles: []
    });
    if (isEvtWithFiles(event2) && onDragLeave) {
      onDragLeave(event2);
    }
  }, [rootRef, onDragLeave, noDragEventsBubbling]);
  var onDropCb = (0, import_react.useCallback)(function(event2) {
    event2.preventDefault();
    event2.persist();
    stopPropagation(event2);
    dragTargetsRef.current = [];
    if (isEvtWithFiles(event2)) {
      Promise.resolve(getFilesFromEvent(event2)).then(function(files) {
        if (isPropagationStopped(event2) && !noDragEventsBubbling) {
          return;
        }
        var acceptedFiles = [];
        var rejectedFiles = [];
        files.forEach(function(file) {
          if (fileAccepted(file, accept) && fileMatchSize(file, minSize, maxSize)) {
            acceptedFiles.push(file);
          } else {
            rejectedFiles.push(file);
          }
        });
        if (!multiple && acceptedFiles.length > 1) {
          rejectedFiles.push.apply(rejectedFiles, _toConsumableArray(acceptedFiles.splice(0)));
        }
        dispatch({
          acceptedFiles,
          rejectedFiles,
          type: "setFiles"
        });
        if (onDrop) {
          onDrop(acceptedFiles, rejectedFiles, event2);
        }
        if (rejectedFiles.length > 0 && onDropRejected) {
          onDropRejected(rejectedFiles, event2);
        }
        if (acceptedFiles.length > 0 && onDropAccepted) {
          onDropAccepted(acceptedFiles, event2);
        }
      });
    }
    dispatch({
      type: "reset"
    });
  }, [multiple, accept, minSize, maxSize, getFilesFromEvent, onDrop, onDropAccepted, onDropRejected, noDragEventsBubbling]);
  var composeHandler = function composeHandler2(fn) {
    return disabled ? null : fn;
  };
  var composeKeyboardHandler = function composeKeyboardHandler2(fn) {
    return noKeyboard ? null : composeHandler(fn);
  };
  var composeDragHandler = function composeDragHandler2(fn) {
    return noDrag ? null : composeHandler(fn);
  };
  var stopPropagation = function stopPropagation2(event2) {
    if (noDragEventsBubbling) {
      event2.stopPropagation();
    }
  };
  var getRootProps = (0, import_react.useMemo)(function() {
    return function() {
      var _ref3 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _ref3$refKey = _ref3.refKey, refKey = _ref3$refKey === void 0 ? "ref" : _ref3$refKey, onKeyDown = _ref3.onKeyDown, onFocus = _ref3.onFocus, onBlur = _ref3.onBlur, onClick = _ref3.onClick, onDragEnter2 = _ref3.onDragEnter, onDragOver2 = _ref3.onDragOver, onDragLeave2 = _ref3.onDragLeave, onDrop2 = _ref3.onDrop, rest = _objectWithoutProperties2(_ref3, ["refKey", "onKeyDown", "onFocus", "onBlur", "onClick", "onDragEnter", "onDragOver", "onDragLeave", "onDrop"]);
      return _objectSpread(_defineProperty({
        onKeyDown: composeKeyboardHandler(composeEventHandlers(onKeyDown, onKeyDownCb)),
        onFocus: composeKeyboardHandler(composeEventHandlers(onFocus, onFocusCb)),
        onBlur: composeKeyboardHandler(composeEventHandlers(onBlur, onBlurCb)),
        onClick: composeHandler(composeEventHandlers(onClick, onClickCb)),
        onDragEnter: composeDragHandler(composeEventHandlers(onDragEnter2, onDragEnterCb)),
        onDragOver: composeDragHandler(composeEventHandlers(onDragOver2, onDragOverCb)),
        onDragLeave: composeDragHandler(composeEventHandlers(onDragLeave2, onDragLeaveCb)),
        onDrop: composeDragHandler(composeEventHandlers(onDrop2, onDropCb))
      }, refKey, rootRef), !disabled && !noKeyboard ? {
        tabIndex: 0
      } : {}, {}, rest);
    };
  }, [rootRef, onKeyDownCb, onFocusCb, onBlurCb, onClickCb, onDragEnterCb, onDragOverCb, onDragLeaveCb, onDropCb, noKeyboard, noDrag, disabled]);
  var onInputElementClick = (0, import_react.useCallback)(function(event2) {
    event2.stopPropagation();
  }, []);
  var getInputProps = (0, import_react.useMemo)(function() {
    return function() {
      var _ref4 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _ref4$refKey = _ref4.refKey, refKey = _ref4$refKey === void 0 ? "ref" : _ref4$refKey, onChange = _ref4.onChange, onClick = _ref4.onClick, rest = _objectWithoutProperties2(_ref4, ["refKey", "onChange", "onClick"]);
      var inputProps = _defineProperty({
        accept,
        multiple,
        type: "file",
        style: {
          display: "none"
        },
        onChange: composeHandler(composeEventHandlers(onChange, onDropCb)),
        onClick: composeHandler(composeEventHandlers(onClick, onInputElementClick)),
        autoComplete: "off",
        tabIndex: -1
      }, refKey, inputRef);
      return _objectSpread({}, inputProps, {}, rest);
    };
  }, [inputRef, accept, multiple, onDropCb, disabled]);
  var fileCount = draggedFiles.length;
  var isDragAccept = fileCount > 0 && allFilesAccepted({
    files: draggedFiles,
    accept,
    minSize,
    maxSize,
    multiple
  });
  var isDragReject = fileCount > 0 && !isDragAccept;
  return _objectSpread({}, state, {
    isDragAccept,
    isDragReject,
    isFocused: isFocused && !disabled,
    getRootProps,
    getInputProps,
    rootRef,
    inputRef,
    open: composeHandler(openFileDialog)
  });
}
function reducer(state, action) {
  switch (action.type) {
    case "focus":
      return _objectSpread({}, state, {
        isFocused: true
      });
    case "blur":
      return _objectSpread({}, state, {
        isFocused: false
      });
    case "openDialog":
      return _objectSpread({}, state, {
        isFileDialogActive: true
      });
    case "closeDialog":
      return _objectSpread({}, state, {
        isFileDialogActive: false
      });
    case "setDraggedFiles":
      var isDragActive = action.isDragActive, draggedFiles = action.draggedFiles;
      return _objectSpread({}, state, {
        draggedFiles,
        isDragActive
      });
    case "setFiles":
      return _objectSpread({}, state, {
        acceptedFiles: action.acceptedFiles,
        rejectedFiles: action.rejectedFiles
      });
    case "reset":
      return _objectSpread({}, state, {
        isFileDialogActive: false,
        isDragActive: false,
        draggedFiles: [],
        acceptedFiles: [],
        rejectedFiles: []
      });
    default:
      return state;
  }
}

// node_modules/react-mui-dropzone/dist/index.es.js
var import_Delete = __toESM(require_Delete());
var import_CheckCircle = __toESM(require_CheckCircle());
var import_Close = __toESM(require_Close());
var import_Error = __toESM(require_Error());
var import_Info = __toESM(require_Info());
var import_Warning = __toESM(require_Warning());
function isImage(file) {
  if (file.type.split("/")[0] === "image") {
    return true;
  }
}
function convertBytesToMbsOrKbs(filesize) {
  var size = "";
  if (filesize >= 1048576) {
    size = filesize / 1048576 + " megabytes";
  } else if (filesize >= 1024) {
    size = filesize / 1024 + " kilobytes";
  } else {
    size = filesize + " bytes";
  }
  return size;
}
function createFileFromUrl(_x) {
  return _createFileFromUrl.apply(this, arguments);
}
function _createFileFromUrl() {
  _createFileFromUrl = _asyncToGenerator(import_regenerator.default.mark(function _callee(url) {
    var response, data, metadata, filename;
    return import_regenerator.default.wrap(function _callee$(_context) {
      while (1)
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return fetch(url);
          case 2:
            response = _context.sent;
            _context.next = 5;
            return response.blob();
          case 5:
            data = _context.sent;
            metadata = {
              type: data.type
            };
            filename = url.replace(/\?.+/, "").split("/").pop();
            return _context.abrupt("return", new File([data], filename, metadata));
          case 9:
          case "end":
            return _context.stop();
        }
    }, _callee);
  }));
  return _createFileFromUrl.apply(this, arguments);
}
function readFile(file) {
  return new Promise(function(resolve, reject) {
    var reader = new FileReader();
    reader.onload = function(event2) {
      var _event$target;
      resolve(event2 === null || event2 === void 0 ? void 0 : (_event$target = event2.target) === null || _event$target === void 0 ? void 0 : _event$target.result);
    };
    reader.onerror = function(event2) {
      reader.abort();
      reject(event2);
    };
    reader.readAsDataURL(file);
  });
}
var _DeleteIcon;
var styles = function styles2(_ref) {
  var _palette$text;
  var palette = _ref.palette, shape = _ref.shape, spacing = _ref.spacing;
  return {
    root: {},
    imageContainer: {
      position: "relative",
      zIndex: 10,
      textAlign: "center",
      "&:hover $image": {
        opacity: 0.3
      },
      "&:hover $removeButton": {
        opacity: 1
      }
    },
    image: {
      height: 100,
      width: "initial",
      maxWidth: "100%",
      color: palette === null || palette === void 0 ? void 0 : (_palette$text = palette.text) === null || _palette$text === void 0 ? void 0 : _palette$text.primary,
      transition: "all 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms",
      boxSizing: "border-box",
      boxShadow: "rgba(0, 0, 0, 0.12) 0 1px 6px, rgba(0, 0, 0, 0.12) 0 1px 4px",
      borderRadius: shape === null || shape === void 0 ? void 0 : shape.borderRadius,
      zIndex: 5,
      opacity: 1
    },
    removeButton: {
      transition: ".5s ease",
      position: "absolute",
      opacity: 0,
      top: spacing === null || spacing === void 0 ? void 0 : spacing(-1),
      right: spacing === null || spacing === void 0 ? void 0 : spacing(-1),
      width: 40,
      height: 40,
      "&:focus": {
        opacity: 1
      }
    }
  };
};
function PreviewList(_ref2) {
  var fileObjects = _ref2.fileObjects, handleRemove = _ref2.handleRemove, showFileNames = _ref2.showFileNames, useChipsForPreview = _ref2.useChipsForPreview, previewChipProps = _ref2.previewChipProps, previewGridClasses = _ref2.previewGridClasses, previewGridProps = _ref2.previewGridProps, classes = _ref2.classes, getPreviewIcon = _ref2.getPreviewIcon;
  if (useChipsForPreview) {
    return (0, import_react2.createElement)(Grid_default, _extends({
      spacing: 1,
      direction: "row"
    }, previewGridProps.container, {
      container: true,
      className: clsx_m_default(classes.root, previewGridClasses.container)
    }), fileObjects.map(function(fileObject, i) {
      var _fileObject$file$name, _fileObject$file;
      return (0, import_react2.createElement)(Grid_default, _extends({}, previewGridProps.item, {
        item: true,
        key: "".concat((_fileObject$file$name = (_fileObject$file = fileObject.file) === null || _fileObject$file === void 0 ? void 0 : _fileObject$file.name) !== null && _fileObject$file$name !== void 0 ? _fileObject$file$name : "file", "-").concat(i),
        className: classes.imageContainer
      }), (0, import_react2.createElement)(Chip_default, _extends({
        variant: "outlined"
      }, previewChipProps, {
        label: fileObject.file.name,
        onDelete: handleRemove(i)
      })));
    }));
  }
  return (0, import_react2.createElement)(Grid_default, _extends({
    spacing: 8
  }, previewGridProps.container, {
    container: true,
    className: clsx_m_default(classes.root, previewGridClasses.container)
  }), fileObjects.map(function(fileObject, i) {
    var _fileObject$file$name2, _fileObject$file2;
    return (0, import_react2.createElement)(Grid_default, _extends({
      xs: 4
    }, previewGridProps.item, {
      item: true,
      key: "".concat((_fileObject$file$name2 = (_fileObject$file2 = fileObject.file) === null || _fileObject$file2 === void 0 ? void 0 : _fileObject$file2.name) !== null && _fileObject$file$name2 !== void 0 ? _fileObject$file$name2 : "file", "-").concat(i),
      className: clsx_m_default(classes.imageContainer, previewGridClasses.item)
    }), getPreviewIcon(fileObject, classes), showFileNames && (0, import_react2.createElement)(Typography_default, {
      variant: "body1",
      component: "p"
    }, fileObject.file.name), (0, import_react2.createElement)(Fab_default, {
      onClick: handleRemove(i),
      "aria-label": "Delete",
      className: classes.removeButton
    }, _DeleteIcon || (_DeleteIcon = (0, import_react2.createElement)(import_Delete.default, null))));
  }));
}
true ? PreviewList.propTypes = {
  classes: import_prop_types2.default.object.isRequired,
  fileObjects: import_prop_types2.default.arrayOf(import_prop_types2.default.object).isRequired,
  getPreviewIcon: import_prop_types2.default.func.isRequired,
  handleRemove: import_prop_types2.default.func.isRequired,
  previewChipProps: import_prop_types2.default.object,
  previewGridClasses: import_prop_types2.default.object,
  previewGridProps: import_prop_types2.default.object,
  showFileNames: import_prop_types2.default.bool,
  useChipsForPreview: import_prop_types2.default.bool
} : void 0;
var PreviewList$1 = withStyles_default(styles, {
  name: "MuiDropzonePreviewList"
})(PreviewList);
var _excluded = ["classes", "className", "message", "onClose", "variant"];
var variantIcon = {
  success: import_CheckCircle.default,
  warning: import_Warning.default,
  error: import_Error.default,
  info: import_Info.default
};
var styles$1 = function styles3(theme) {
  var _theme$palette, _theme$palette$succes, _theme$palette2, _theme$palette2$error, _theme$palette3, _theme$palette3$info, _theme$palette4, _theme$palette4$warni, _theme$spacing;
  return {
    successAlert: {
      backgroundColor: theme === null || theme === void 0 ? void 0 : (_theme$palette = theme.palette) === null || _theme$palette === void 0 ? void 0 : (_theme$palette$succes = _theme$palette.success) === null || _theme$palette$succes === void 0 ? void 0 : _theme$palette$succes.main
    },
    errorAlert: {
      backgroundColor: theme === null || theme === void 0 ? void 0 : (_theme$palette2 = theme.palette) === null || _theme$palette2 === void 0 ? void 0 : (_theme$palette2$error = _theme$palette2.error) === null || _theme$palette2$error === void 0 ? void 0 : _theme$palette2$error.main
    },
    infoAlert: {
      backgroundColor: theme === null || theme === void 0 ? void 0 : (_theme$palette3 = theme.palette) === null || _theme$palette3 === void 0 ? void 0 : (_theme$palette3$info = _theme$palette3.info) === null || _theme$palette3$info === void 0 ? void 0 : _theme$palette3$info.main
    },
    warningAlert: {
      backgroundColor: theme === null || theme === void 0 ? void 0 : (_theme$palette4 = theme.palette) === null || _theme$palette4 === void 0 ? void 0 : (_theme$palette4$warni = _theme$palette4.warning) === null || _theme$palette4$warni === void 0 ? void 0 : _theme$palette4$warni.main
    },
    message: {
      display: "flex",
      alignItems: "center",
      "& > svg": {
        marginRight: theme === null || theme === void 0 ? void 0 : (_theme$spacing = theme.spacing) === null || _theme$spacing === void 0 ? void 0 : _theme$spacing.call(theme, 1)
      }
    },
    icon: {
      fontSize: 20,
      opacity: 0.9
    },
    closeButton: {}
  };
};
var SnackbarContentWrapper = (0, import_react2.forwardRef)(function(props, ref) {
  var classes = props.classes, className = props.className, message = props.message, onClose = props.onClose, variant = props.variant, other = _objectWithoutProperties(props, _excluded);
  var Icon = variantIcon[variant];
  return (0, import_react2.createElement)(SnackbarContent_default, _extends({
    ref,
    className: clsx_m_default(classes["".concat(variant, "Alert")], className),
    "aria-describedby": "client-snackbar",
    message: (0, import_react2.createElement)("span", {
      id: "client-snackbar",
      className: classes.message
    }, (0, import_react2.createElement)(Icon, {
      className: classes.icon
    }), message),
    action: [(0, import_react2.createElement)(IconButton_default, {
      key: "close",
      "aria-label": "Close",
      color: "inherit",
      className: classes.closeButton,
      onClick: onClose
    }, (0, import_react2.createElement)(import_Close.default, {
      className: classes.icon
    }))]
  }, other));
});
true ? SnackbarContentWrapper.propTypes = {
  classes: import_prop_types2.default.object.isRequired,
  className: import_prop_types2.default.string,
  message: import_prop_types2.default.node,
  onClose: import_prop_types2.default.func,
  variant: import_prop_types2.default.oneOf(["success", "warning", "error", "info"]).isRequired
} : void 0;
SnackbarContentWrapper.displayName = "SnackbarContentWrapper";
var SnackbarContentWrapper$1 = withStyles_default(styles$1, {
  name: "MuiDropzoneSnackbar"
})(SnackbarContentWrapper);
function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var styles$2 = function styles4(_ref) {
  var _palette$background, _palette$background2, _palette$background3, _palette$primary, _palette$error, _palette$error2, _palette$error3, _palette$error4, _palette$error5, _palette$text;
  var palette = _ref.palette, shape = _ref.shape, spacing = _ref.spacing;
  return {
    "@keyframes progress": {
      "0%": {
        backgroundPosition: "0 0"
      },
      "100%": {
        backgroundPosition: "-70px 0"
      }
    },
    root: {
      position: "relative",
      width: "100%",
      minHeight: "250px",
      backgroundColor: palette === null || palette === void 0 ? void 0 : (_palette$background = palette.background) === null || _palette$background === void 0 ? void 0 : _palette$background.paper,
      border: "dashed",
      borderColor: palette === null || palette === void 0 ? void 0 : palette.divider,
      borderRadius: shape === null || shape === void 0 ? void 0 : shape.borderRadius,
      boxSizing: "border-box",
      cursor: "pointer",
      overflow: "hidden"
    },
    active: {
      animation: "$progress 2s linear infinite !important",
      // eslint-disable-next-line max-len
      backgroundImage: "repeating-linear-gradient(-45deg, ".concat(palette === null || palette === void 0 ? void 0 : (_palette$background2 = palette.background) === null || _palette$background2 === void 0 ? void 0 : _palette$background2.paper, ", ").concat(palette === null || palette === void 0 ? void 0 : (_palette$background3 = palette.background) === null || _palette$background3 === void 0 ? void 0 : _palette$background3.paper, " 25px, ").concat(palette === null || palette === void 0 ? void 0 : palette.divider, " 25px, ").concat(palette === null || palette === void 0 ? void 0 : palette.divider, " 50px)"),
      backgroundSize: "150% 100%",
      border: "solid",
      borderColor: palette === null || palette === void 0 ? void 0 : (_palette$primary = palette.primary) === null || _palette$primary === void 0 ? void 0 : _palette$primary.light
    },
    invalid: {
      // eslint-disable-next-line max-len
      backgroundImage: "repeating-linear-gradient(-45deg, ".concat(palette === null || palette === void 0 ? void 0 : (_palette$error = palette.error) === null || _palette$error === void 0 ? void 0 : _palette$error.light, ", ").concat(palette === null || palette === void 0 ? void 0 : (_palette$error2 = palette.error) === null || _palette$error2 === void 0 ? void 0 : _palette$error2.light, " 25px, ").concat(palette === null || palette === void 0 ? void 0 : (_palette$error3 = palette.error) === null || _palette$error3 === void 0 ? void 0 : _palette$error3.dark, " 25px, ").concat(palette === null || palette === void 0 ? void 0 : (_palette$error4 = palette.error) === null || _palette$error4 === void 0 ? void 0 : _palette$error4.dark, " 50px)"),
      borderColor: palette === null || palette === void 0 ? void 0 : (_palette$error5 = palette.error) === null || _palette$error5 === void 0 ? void 0 : _palette$error5.main
    },
    textContainer: {
      textAlign: "center"
    },
    text: {
      marginBottom: spacing === null || spacing === void 0 ? void 0 : spacing(3),
      marginTop: spacing === null || spacing === void 0 ? void 0 : spacing(3)
    },
    icon: {
      width: 51,
      height: 51,
      color: palette === null || palette === void 0 ? void 0 : (_palette$text = palette.text) === null || _palette$text === void 0 ? void 0 : _palette$text.primary
    }
  };
};
var defaultSnackbarAnchorOrigin = {
  horizontal: "left",
  vertical: "bottom"
};
var defaultGetPreviewIcon = function defaultGetPreviewIcon2(fileObject, classes) {
  if (isImage(fileObject.file)) {
    return (0, import_react2.createElement)("img", {
      className: classes.image,
      role: "presentation",
      src: fileObject.data
    });
  }
  return (0, import_react2.createElement)(import_AttachFile.default, {
    className: classes.image
  });
};
var DropzoneAreaBase = function(_React$PureComponent) {
  _inherits(DropzoneAreaBase2, _React$PureComponent);
  var _super = _createSuper(DropzoneAreaBase2);
  function DropzoneAreaBase2() {
    var _this;
    _classCallCheck(this, DropzoneAreaBase2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _this.state = {
      openSnackBar: false,
      snackbarMessage: "",
      snackbarVariant: "success"
    };
    _this.handleDropAccepted = function() {
      var _ref2 = _asyncToGenerator(import_regenerator.default.mark(function _callee2(acceptedFiles, evt) {
        var _this$props, fileObjects, filesLimit, getFileAddedMessage2, getFileLimitExceedMessage2, onAdd, onDrop, fileObjs, message;
        return import_regenerator.default.wrap(function _callee2$(_context2) {
          while (1)
            switch (_context2.prev = _context2.next) {
              case 0:
                _this$props = _this.props, fileObjects = _this$props.fileObjects, filesLimit = _this$props.filesLimit, getFileAddedMessage2 = _this$props.getFileAddedMessage, getFileLimitExceedMessage2 = _this$props.getFileLimitExceedMessage, onAdd = _this$props.onAdd, onDrop = _this$props.onDrop;
                if (!(filesLimit > 1 && fileObjects.length + acceptedFiles.length > filesLimit)) {
                  _context2.next = 4;
                  break;
                }
                _this.setState({
                  openSnackBar: true,
                  snackbarMessage: getFileLimitExceedMessage2(filesLimit),
                  snackbarVariant: "error"
                }, _this.notifyAlert);
                return _context2.abrupt("return");
              case 4:
                if (onDrop) {
                  onDrop(acceptedFiles, evt);
                }
                _context2.next = 7;
                return Promise.all(acceptedFiles.map(function() {
                  var _ref3 = _asyncToGenerator(import_regenerator.default.mark(function _callee(file) {
                    var data;
                    return import_regenerator.default.wrap(function _callee$(_context) {
                      while (1)
                        switch (_context.prev = _context.next) {
                          case 0:
                            _context.next = 2;
                            return readFile(file);
                          case 2:
                            data = _context.sent;
                            return _context.abrupt("return", {
                              file,
                              data
                            });
                          case 4:
                          case "end":
                            return _context.stop();
                        }
                    }, _callee);
                  }));
                  return function(_x3) {
                    return _ref3.apply(this, arguments);
                  };
                }()));
              case 7:
                fileObjs = _context2.sent;
                if (onAdd) {
                  onAdd(fileObjs);
                }
                message = fileObjs.reduce(function(msg, fileObj) {
                  return msg + getFileAddedMessage2(fileObj.file.name);
                }, "");
                _this.setState({
                  openSnackBar: true,
                  snackbarMessage: message,
                  snackbarVariant: "success"
                }, _this.notifyAlert);
              case 11:
              case "end":
                return _context2.stop();
            }
        }, _callee2);
      }));
      return function(_x, _x2) {
        return _ref2.apply(this, arguments);
      };
    }();
    _this.handleDropRejected = function(rejectedFiles, evt) {
      var _this$props2 = _this.props, acceptedFiles = _this$props2.acceptedFiles, filesLimit = _this$props2.filesLimit, fileObjects = _this$props2.fileObjects, getDropRejectMessage2 = _this$props2.getDropRejectMessage, getFileLimitExceedMessage2 = _this$props2.getFileLimitExceedMessage, maxFileSize = _this$props2.maxFileSize, onDropRejected = _this$props2.onDropRejected;
      var message = "";
      if (fileObjects.length + rejectedFiles.length > filesLimit) {
        message = getFileLimitExceedMessage2(filesLimit);
      } else {
        rejectedFiles.forEach(function(rejectedFile) {
          message = getDropRejectMessage2(rejectedFile, acceptedFiles, maxFileSize);
        });
      }
      if (onDropRejected) {
        onDropRejected(rejectedFiles, evt);
      }
      _this.setState({
        openSnackBar: true,
        snackbarMessage: message,
        snackbarVariant: "error"
      }, _this.notifyAlert);
    };
    _this.handleRemove = function(fileIndex) {
      return function(event2) {
        event2.stopPropagation();
        var _this$props3 = _this.props, fileObjects = _this$props3.fileObjects, getFileRemovedMessage2 = _this$props3.getFileRemovedMessage, onDelete = _this$props3.onDelete;
        var removedFileObj = fileObjects[fileIndex];
        if (onDelete) {
          onDelete(removedFileObj, fileIndex);
        }
        _this.setState({
          openSnackBar: true,
          snackbarMessage: getFileRemovedMessage2(removedFileObj.file.name),
          snackbarVariant: "info"
        }, _this.notifyAlert);
      };
    };
    _this.handleCloseSnackbar = function() {
      _this.setState({
        openSnackBar: false
      });
    };
    return _this;
  }
  _createClass(DropzoneAreaBase2, [{
    key: "notifyAlert",
    value: function notifyAlert() {
      var onAlert = this.props.onAlert;
      var _this$state = this.state, openSnackBar = _this$state.openSnackBar, snackbarMessage = _this$state.snackbarMessage, snackbarVariant = _this$state.snackbarVariant;
      if (openSnackBar && onAlert) {
        onAlert(snackbarMessage, snackbarVariant);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;
      var _this$props4 = this.props, acceptedFiles = _this$props4.acceptedFiles, alertSnackbarProps = _this$props4.alertSnackbarProps, classes = _this$props4.classes, disableRejectionFeedback = _this$props4.disableRejectionFeedback, dropzoneClass = _this$props4.dropzoneClass, dropzoneParagraphClass = _this$props4.dropzoneParagraphClass, dropzoneProps = _this$props4.dropzoneProps, dropzoneText = _this$props4.dropzoneText, fileObjects = _this$props4.fileObjects, filesLimit = _this$props4.filesLimit, getPreviewIcon = _this$props4.getPreviewIcon, Icon = _this$props4.Icon, inputProps = _this$props4.inputProps, maxFileSize = _this$props4.maxFileSize, previewChipProps = _this$props4.previewChipProps, previewGridClasses = _this$props4.previewGridClasses, previewGridProps = _this$props4.previewGridProps, previewText = _this$props4.previewText, showAlerts = _this$props4.showAlerts, showFileNames = _this$props4.showFileNames, showFileNamesInPreview = _this$props4.showFileNamesInPreview, showPreviews = _this$props4.showPreviews, showPreviewsInDropzone = _this$props4.showPreviewsInDropzone, useChipsForPreview = _this$props4.useChipsForPreview;
      var _this$state2 = this.state, openSnackBar = _this$state2.openSnackBar, snackbarMessage = _this$state2.snackbarMessage, snackbarVariant = _this$state2.snackbarVariant;
      var acceptFiles = acceptedFiles === null || acceptedFiles === void 0 ? void 0 : acceptedFiles.join(",");
      var isMultiple = filesLimit > 1;
      var previewsVisible = showPreviews && fileObjects.length > 0;
      var previewsInDropzoneVisible = showPreviewsInDropzone && fileObjects.length > 0;
      return (0, import_react2.createElement)(import_react2.Fragment, null, (0, import_react2.createElement)(es_default, _extends({}, dropzoneProps, {
        accept: acceptFiles,
        onDropAccepted: this.handleDropAccepted,
        onDropRejected: this.handleDropRejected,
        maxSize: maxFileSize,
        multiple: isMultiple
      }), function(_ref4) {
        var getRootProps = _ref4.getRootProps, getInputProps = _ref4.getInputProps, isDragActive = _ref4.isDragActive, isDragReject = _ref4.isDragReject;
        return (0, import_react2.createElement)("div", getRootProps({
          className: clsx_m_default(classes.root, dropzoneClass, isDragActive && classes.active, !disableRejectionFeedback && isDragReject && classes.invalid)
        }), (0, import_react2.createElement)("input", getInputProps(inputProps)), (0, import_react2.createElement)("div", {
          className: classes.textContainer
        }, (0, import_react2.createElement)(Typography_default, {
          variant: "h5",
          component: "p",
          className: clsx_m_default(classes.text, dropzoneParagraphClass)
        }, dropzoneText), Icon ? (0, import_react2.createElement)(Icon, {
          className: classes.icon
        }) : (0, import_react2.createElement)(import_CloudUpload.default, {
          className: classes.icon
        })), previewsInDropzoneVisible && (0, import_react2.createElement)(PreviewList$1, {
          fileObjects,
          handleRemove: _this2.handleRemove,
          getPreviewIcon,
          showFileNames,
          useChipsForPreview,
          previewChipProps,
          previewGridClasses,
          previewGridProps
        }));
      }), previewsVisible && (0, import_react2.createElement)(import_react2.Fragment, null, (0, import_react2.createElement)(Typography_default, {
        variant: "subtitle1",
        component: "span"
      }, previewText), (0, import_react2.createElement)(PreviewList$1, {
        fileObjects,
        handleRemove: this.handleRemove,
        getPreviewIcon,
        showFileNames: showFileNamesInPreview,
        useChipsForPreview,
        previewChipProps,
        previewGridClasses,
        previewGridProps
      })), (typeof showAlerts === "boolean" && showAlerts || Array.isArray(showAlerts) && showAlerts.includes(snackbarVariant)) && (0, import_react2.createElement)(Snackbar_default, _extends({
        anchorOrigin: defaultSnackbarAnchorOrigin,
        autoHideDuration: 6e3
      }, alertSnackbarProps, {
        open: openSnackBar,
        onClose: this.handleCloseSnackbar
      }), (0, import_react2.createElement)(SnackbarContentWrapper$1, {
        onClose: this.handleCloseSnackbar,
        variant: snackbarVariant,
        message: snackbarMessage
      })));
    }
  }]);
  return DropzoneAreaBase2;
}(import_react2.PureComponent);
DropzoneAreaBase.defaultProps = {
  acceptedFiles: [],
  filesLimit: 3,
  fileObjects: [],
  maxFileSize: 3e6,
  dropzoneText: "Drag and drop a file here or click",
  previewText: "Preview:",
  disableRejectionFeedback: false,
  showPreviews: false,
  // By default previews show up under in the dialog and inside in the standalone
  showPreviewsInDropzone: true,
  showFileNames: false,
  showFileNamesInPreview: false,
  useChipsForPreview: false,
  previewChipProps: {},
  previewGridClasses: {},
  previewGridProps: {},
  showAlerts: true,
  alertSnackbarProps: {
    anchorOrigin: {
      horizontal: "left",
      vertical: "bottom"
    },
    autoHideDuration: 6e3
  },
  getFileLimitExceedMessage: function getFileLimitExceedMessage(filesLimit) {
    return "Maximum allowed number of files exceeded. Only ".concat(filesLimit, " allowed");
  },
  getFileAddedMessage: function getFileAddedMessage(fileName) {
    return "File ".concat(fileName, " successfully added.");
  },
  getPreviewIcon: defaultGetPreviewIcon,
  getFileRemovedMessage: function getFileRemovedMessage(fileName) {
    return "File ".concat(fileName, " removed.");
  },
  getDropRejectMessage: function getDropRejectMessage(rejectedFile, acceptedFiles, maxFileSize) {
    var message = "File ".concat(rejectedFile.name, " was rejected. ");
    if (!acceptedFiles.includes(rejectedFile.type)) {
      message += "File type not supported. ";
    }
    if (rejectedFile.size > maxFileSize) {
      message += "File is too big. Size limit is " + convertBytesToMbsOrKbs(maxFileSize) + ". ";
    }
    return message;
  }
};
var FileObjectShape = import_prop_types2.default.shape({
  file: import_prop_types2.default.object,
  data: import_prop_types2.default.any
});
true ? DropzoneAreaBase.propTypes = {
  /** @ignore */
  classes: import_prop_types2.default.object.isRequired,
  /** A list of file types to accept.
   * @see See [here](https://react-dropzone.js.org/#section-accepting-specific-file-types) for more details.
   */
  acceptedFiles: import_prop_types2.default.arrayOf(import_prop_types2.default.string),
  /** Maximum number of files that can be loaded into the dropzone. */
  filesLimit: import_prop_types2.default.number,
  /** Icon to be displayed inside the dropzone area. */
  Icon: import_prop_types2.default.elementType,
  /** Currently loaded files. */
  fileObjects: import_prop_types2.default.arrayOf(FileObjectShape),
  /** Maximum file size (in bytes) that the dropzone will accept. */
  maxFileSize: import_prop_types2.default.number,
  /** Text inside the dropzone. */
  dropzoneText: import_prop_types2.default.string,
  /** Custom CSS class name for dropzone container. */
  dropzoneClass: import_prop_types2.default.string,
  /** Custom CSS class name for text inside the container. */
  dropzoneParagraphClass: import_prop_types2.default.string,
  /** Disable feedback effect when dropping rejected files. */
  disableRejectionFeedback: import_prop_types2.default.bool,
  /** Shows previews **BELOW** the dropzone. */
  showPreviews: import_prop_types2.default.bool,
  /** Shows preview **INSIDE** the dropzone area. */
  showPreviewsInDropzone: import_prop_types2.default.bool,
  /** Shows file name under the dropzone image. */
  showFileNames: import_prop_types2.default.bool,
  /** Shows file name under the image. */
  showFileNamesInPreview: import_prop_types2.default.bool,
  /** Uses deletable Material-UI Chip components to display file names. */
  useChipsForPreview: import_prop_types2.default.bool,
  /**
   * Props to pass to the Material-UI Chip components.<br/>Requires `useChipsForPreview` prop to be `true`.
   *
   * @see See [Material-UI Chip](https://material-ui.com/api/chip/#props) for available values.
   */
  previewChipProps: import_prop_types2.default.object,
  /**
   * Custom CSS classNames for preview Grid components.<br/>
   * Should be in the form {container: string, item: string, image: string}.
   */
  previewGridClasses: import_prop_types2.default.object,
  /**
   * Props to pass to the Material-UI Grid components.<br/>
   * Should be in the form {container: GridProps, item: GridProps}.
   *
   * @see See [Material-UI Grid](https://material-ui.com/api/grid/#props) for available GridProps values.
   */
  previewGridProps: import_prop_types2.default.object,
  /** The label for the file preview section. */
  previewText: import_prop_types2.default.string,
  /**
   * Shows styled Material-UI Snackbar when files are dropped, deleted or rejected.
   *
   * - can be a boolean ("global" `true` or `false` for all alerts).
   * - can be an array, with values 'error', 'info', 'success' to select to view only certain alerts:
   *  - showAlerts={['error']} for only errors.
   *  - showAlerts={['error', 'info']} for both errors and info.
   *  - showAlerts={['error', 'success', 'info']} is same as showAlerts={true}.
   *  - showAlerts={[]} is same as showAlerts={false}.
   */
  showAlerts: import_prop_types2.default.oneOfType([import_prop_types2.default.bool, import_prop_types2.default.arrayOf(import_prop_types2.default.oneOf(["error", "success", "info"]))]),
  /**
   * Props to pass to the Material-UI Snackbar components.<br/>Requires `showAlerts` prop to be `true`.
   *
   * @see See [Material-UI Snackbar](https://material-ui.com/api/snackbar/#props) for available values.
   */
  alertSnackbarProps: import_prop_types2.default.object,
  /**
   * Props to pass to the Dropzone component.
   *
   * @see See [Dropzone props](https://react-dropzone.js.org/#src) for available values.
   */
  dropzoneProps: import_prop_types2.default.object,
  /**
   * Attributes applied to the input element.
   *
   * @see See [MDN Input File attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#Additional_attributes) for available values.
   */
  inputProps: import_prop_types2.default.object,
  /**
   * Get alert message to display when files limit is exceed.
   *
   * *Default*: "Maximum allowed number of files exceeded. Only ${filesLimit} allowed"
   *
   * @param {number} filesLimit The `filesLimit` currently set for the component.
   */
  getFileLimitExceedMessage: import_prop_types2.default.func,
  /**
   * Get alert message to display when a new file is added.
   *
   * *Default*: "File ${fileName} successfully added."
   *
   * @param {string} fileName The newly added file name.
   */
  getFileAddedMessage: import_prop_types2.default.func,
  /**
   * Get alert message to display when a file is removed.
   *
   * *Default*: "File ${fileName} removed."
   *
   * @param {string} fileName The name of the removed file.
   */
  getFileRemovedMessage: import_prop_types2.default.func,
  /**
   * Get alert message to display when a file is rejected onDrop.
   *
   * *Default*: "File ${rejectedFile.name} was rejected."
   *
   * @param {Object} rejectedFile The file that got rejected
   * @param {string[]} acceptedFiles The `acceptedFiles` prop currently set for the component
   * @param {number} maxFileSize The `maxFileSize` prop currently set for the component
   */
  getDropRejectMessage: import_prop_types2.default.func,
  /**
   * A function which determines which icon to display for a file preview.
   *
   * *Default*: If its an image then displays a preview the image, otherwise it will display an attachment icon
   *
   * @param {FileObject} objectFile The file which the preview will belong to
   * @param {Object} classes The classes for the file preview icon, in the default case we use the 'image' className.
   */
  getPreviewIcon: import_prop_types2.default.func,
  /**
   * Fired when new files are added to dropzone.
   *
   * @param {FileObject[]} newFiles The new files added to the dropzone.
   */
  onAdd: import_prop_types2.default.func,
  /**
   * Fired when a file is deleted from the previews panel.
   *
   * @param {FileObject} deletedFileObject The file that was removed.
   * @param {number} index The index of the removed file object.
   */
  onDelete: import_prop_types2.default.func,
  /**
   * Fired when the user drops files into the dropzone.
   *
   * @param {File[]} droppedFiles All the files dropped into the dropzone.
   * @param {Event} event The react-dropzone drop event.
   */
  onDrop: import_prop_types2.default.func,
  /**
   * Fired when a file is rejected because of wrong file type, size or goes beyond the filesLimit.
   *
   * @param {File[]} rejectedFiles All the rejected files.
   * @param {Event} event The react-dropzone drop event.
   */
  onDropRejected: import_prop_types2.default.func,
  /**
   * Fired when an alert is triggered.
   *
   * @param {string} message Alert message.
   * @param {string} variant One of "error", "info", "success".
   */
  onAlert: import_prop_types2.default.func
} : void 0;
var DropzoneAreaBase$1 = withStyles_default(styles$2, {
  name: "MuiDropzoneArea"
})(DropzoneAreaBase);
var _excluded$1 = ["clearOnUnmount", "initialFiles", "onChange", "onDelete"];
function _createSuper$1(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$1();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct$1() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var splitDropzoneAreaProps = function splitDropzoneAreaProps2(props) {
  var clearOnUnmount = props.clearOnUnmount, initialFiles = props.initialFiles, onChange = props.onChange, onDelete = props.onDelete, dropzoneAreaProps = _objectWithoutProperties(props, _excluded$1);
  return [{
    clearOnUnmount,
    initialFiles,
    onChange,
    onDelete
  }, dropzoneAreaProps];
};
var DropzoneArea = function(_React$PureComponent) {
  _inherits(DropzoneArea2, _React$PureComponent);
  var _super = _createSuper$1(DropzoneArea2);
  function DropzoneArea2() {
    var _this;
    _classCallCheck(this, DropzoneArea2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _this.state = {
      fileObjects: []
    };
    _this.notifyFileChange = function() {
      var onChange = _this.props.onChange;
      var fileObjects = _this.state.fileObjects;
      if (onChange) {
        onChange(fileObjects.map(function(fileObject) {
          return fileObject.file;
        }));
      }
    };
    _this.loadInitialFiles = _asyncToGenerator(import_regenerator.default.mark(function _callee2() {
      var initialFiles, fileObjs;
      return import_regenerator.default.wrap(function _callee2$(_context2) {
        while (1)
          switch (_context2.prev = _context2.next) {
            case 0:
              initialFiles = _this.props.initialFiles;
              _context2.prev = 1;
              _context2.next = 4;
              return Promise.all(initialFiles.map(function() {
                var _ref2 = _asyncToGenerator(import_regenerator.default.mark(function _callee(initialFile) {
                  var file, data;
                  return import_regenerator.default.wrap(function _callee$(_context) {
                    while (1)
                      switch (_context.prev = _context.next) {
                        case 0:
                          if (!(typeof initialFile === "string")) {
                            _context.next = 6;
                            break;
                          }
                          _context.next = 3;
                          return createFileFromUrl(initialFile);
                        case 3:
                          file = _context.sent;
                          _context.next = 7;
                          break;
                        case 6:
                          file = initialFile;
                        case 7:
                          _context.next = 9;
                          return readFile(file);
                        case 9:
                          data = _context.sent;
                          return _context.abrupt("return", {
                            file,
                            data
                          });
                        case 11:
                        case "end":
                          return _context.stop();
                      }
                  }, _callee);
                }));
                return function(_x) {
                  return _ref2.apply(this, arguments);
                };
              }()));
            case 4:
              fileObjs = _context2.sent;
              _this.setState(function(state) {
                return {
                  fileObjects: [].concat(state.fileObjects, fileObjs)
                };
              }, _this.notifyFileChange);
              _context2.next = 11;
              break;
            case 8:
              _context2.prev = 8;
              _context2.t0 = _context2["catch"](1);
              console.log(_context2.t0);
            case 11:
            case "end":
              return _context2.stop();
          }
      }, _callee2, null, [[1, 8]]);
    }));
    _this.addFiles = function() {
      var _ref3 = _asyncToGenerator(import_regenerator.default.mark(function _callee3(newFileObjects) {
        var filesLimit;
        return import_regenerator.default.wrap(function _callee3$(_context3) {
          while (1)
            switch (_context3.prev = _context3.next) {
              case 0:
                filesLimit = _this.props.filesLimit;
                _this.setState(function(state) {
                  if (filesLimit <= 1) {
                    return {
                      fileObjects: [].concat(newFileObjects[0])
                    };
                  }
                  return {
                    fileObjects: [].concat(state.fileObjects, newFileObjects)
                  };
                }, _this.notifyFileChange);
              case 2:
              case "end":
                return _context3.stop();
            }
        }, _callee3);
      }));
      return function(_x2) {
        return _ref3.apply(this, arguments);
      };
    }();
    _this.deleteFile = function(removedFileObj, removedFileObjIdx) {
      event.stopPropagation();
      var onDelete = _this.props.onDelete;
      var fileObjects = _this.state.fileObjects;
      var remainingFileObjs = fileObjects.filter(function(fileObject, i) {
        return i !== removedFileObjIdx;
      });
      if (onDelete) {
        onDelete(removedFileObj.file);
      }
      _this.setState({
        fileObjects: remainingFileObjs
      }, _this.notifyFileChange);
    };
    return _this;
  }
  _createClass(DropzoneArea2, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.loadInitialFiles();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var clearOnUnmount = this.props.clearOnUnmount;
      if (clearOnUnmount) {
        this.setState({
          fileObjects: []
        }, this.notifyFileChange);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _splitDropzoneAreaPro = splitDropzoneAreaProps(this.props), _splitDropzoneAreaPro2 = _slicedToArray(_splitDropzoneAreaPro, 2), dropzoneAreaProps = _splitDropzoneAreaPro2[1];
      var fileObjects = this.state.fileObjects;
      return (0, import_react2.createElement)(DropzoneAreaBase$1, _extends({}, dropzoneAreaProps, {
        fileObjects,
        onAdd: this.addFiles,
        onDelete: this.deleteFile
      }));
    }
  }]);
  return DropzoneArea2;
}(import_react2.PureComponent);
DropzoneArea.defaultProps = {
  clearOnUnmount: true,
  filesLimit: 3,
  initialFiles: []
};
true ? DropzoneArea.propTypes = _extends({}, DropzoneAreaBase$1.propTypes, {
  /** Clear uploaded files when component is unmounted. */
  clearOnUnmount: import_prop_types2.default.bool,
  /** List containing File objects or URL strings.<br/>
   * **Note:** Please take care of CORS.
  */
  initialFiles: import_prop_types2.default.arrayOf(import_prop_types2.default.oneOfType([import_prop_types2.default.string, import_prop_types2.default.any])),
  /** Maximum number of files that can be loaded into the dropzone. */
  filesLimit: import_prop_types2.default.number,
  /**
   * Fired when the files inside dropzone change.
   *
   * @param {File[]} loadedFiles All the files currently loaded into the dropzone.
   */
  onChange: import_prop_types2.default.func,
  /**
   * Fired when a file is deleted from the previews panel.
   *
   * @param {File} deletedFile The file that was removed.
   */
  onDelete: import_prop_types2.default.func
}) : void 0;
var _excluded$2 = ["cancelButtonText", "dialogProps", "dialogTitle", "fullWidth", "maxWidth", "onClose", "onSave", "open", "submitButtonText"];
function _createSuper$2(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$2();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct$2() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function splitDropzoneDialogProps(allProps) {
  var cancelButtonText = allProps.cancelButtonText, dialogProps = allProps.dialogProps, dialogTitle = allProps.dialogTitle, fullWidth = allProps.fullWidth, maxWidth = allProps.maxWidth, onClose = allProps.onClose, onSave = allProps.onSave, open = allProps.open, submitButtonText = allProps.submitButtonText, dropzoneAreaProps = _objectWithoutProperties(allProps, _excluded$2);
  return [{
    cancelButtonText,
    dialogProps,
    dialogTitle,
    fullWidth,
    maxWidth,
    onClose,
    onSave,
    open,
    submitButtonText
  }, dropzoneAreaProps];
}
var DropzoneDialogBase = function(_React$PureComponent) {
  _inherits(DropzoneDialogBase2, _React$PureComponent);
  var _super = _createSuper$2(DropzoneDialogBase2);
  function DropzoneDialogBase2() {
    _classCallCheck(this, DropzoneDialogBase2);
    return _super.apply(this, arguments);
  }
  _createClass(DropzoneDialogBase2, [{
    key: "render",
    value: function render() {
      var _splitDropzoneDialogP = splitDropzoneDialogProps(this.props), _splitDropzoneDialogP2 = _slicedToArray(_splitDropzoneDialogP, 2), dropzoneDialogProps = _splitDropzoneDialogP2[0], dropzoneAreaProps = _splitDropzoneDialogP2[1];
      var cancelButtonText = dropzoneDialogProps.cancelButtonText, dialogProps = dropzoneDialogProps.dialogProps, dialogTitle = dropzoneDialogProps.dialogTitle, fullWidth = dropzoneDialogProps.fullWidth, maxWidth = dropzoneDialogProps.maxWidth, onClose = dropzoneDialogProps.onClose, onSave = dropzoneDialogProps.onSave, open = dropzoneDialogProps.open, submitButtonText = dropzoneDialogProps.submitButtonText;
      var submitDisabled = dropzoneAreaProps.fileObjects.length === 0;
      return (0, import_react2.createElement)(Dialog_default, _extends({}, dialogProps, {
        fullWidth,
        maxWidth,
        onClose,
        open
      }), (0, import_react2.createElement)(DialogTitle_default, null, dialogTitle), (0, import_react2.createElement)(DialogContent_default, null, (0, import_react2.createElement)(DropzoneAreaBase$1, dropzoneAreaProps)), (0, import_react2.createElement)(DialogActions_default, null, (0, import_react2.createElement)(Button_default, {
        color: "primary",
        onClick: onClose
      }, cancelButtonText), (0, import_react2.createElement)(Button_default, {
        color: "primary",
        disabled: submitDisabled,
        onClick: onSave
      }, submitButtonText)));
    }
  }]);
  return DropzoneDialogBase2;
}(import_react2.PureComponent);
DropzoneDialogBase.defaultProps = {
  open: false,
  dialogTitle: "Upload file",
  dialogProps: {},
  fullWidth: true,
  maxWidth: "sm",
  cancelButtonText: "Cancel",
  submitButtonText: "Submit",
  showPreviews: true,
  showPreviewsInDropzone: false,
  showFileNamesInPreview: true
};
true ? DropzoneDialogBase.propTypes = _extends({}, DropzoneAreaBase$1.propTypes, {
  /** Sets whether the dialog is open or closed. */
  open: import_prop_types2.default.bool,
  /** The Dialog title. */
  dialogTitle: import_prop_types2.default.oneOfType([import_prop_types2.default.string, import_prop_types2.default.element]),
  /**
   * Props to pass to the Material-UI Dialog components.
   * @see See [Material-UI Dialog](https://material-ui.com/api/dialog/#props) for available values.
   */
  dialogProps: import_prop_types2.default.object,
  /**
   * If `true`, the dialog stretches to `maxWidth`.<br/>
   * Notice that the dialog width grow is limited by the default margin.
   */
  fullWidth: import_prop_types2.default.bool,
  /**
   * Determine the max-width of the dialog. The dialog width grows with the size of the screen.<br/>
   * Set to `false` to disable `maxWidth`.
   */
  maxWidth: import_prop_types2.default.string,
  /** Cancel button text in dialog. */
  cancelButtonText: import_prop_types2.default.string,
  /** Submit button text in dialog. */
  submitButtonText: import_prop_types2.default.string,
  /**
   * Fired when the modal is closed.
   *
   * @param {SyntheticEvent} event The react `SyntheticEvent`
   */
  onClose: import_prop_types2.default.func,
  /**
   * Fired when the user clicks the Submit button.
   *
   * @param {SyntheticEvent} event The react `SyntheticEvent`
   */
  onSave: import_prop_types2.default.func,
  /**
   * Shows previews **BELOW** the dropzone.<br/>
   * **Note:** By default previews show up under in the Dialog and inside in the standalone.
   */
  showPreviews: import_prop_types2.default.bool,
  /** Shows preview **INSIDE** the dropzone area. */
  showPreviewsInDropzone: import_prop_types2.default.bool,
  /** Shows file name under the image. */
  showFileNamesInPreview: import_prop_types2.default.bool
}) : void 0;
function _createSuper$3(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$3();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct$3() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var DropzoneDialog = function(_React$PureComponent) {
  _inherits(DropzoneDialog2, _React$PureComponent);
  var _super = _createSuper$3(DropzoneDialog2);
  function DropzoneDialog2() {
    var _this;
    _classCallCheck(this, DropzoneDialog2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _this.state = {
      fileObjects: []
    };
    _this.notifyFileChange = function() {
      var onChange = _this.props.onChange;
      var fileObjects = _this.state.fileObjects;
      if (onChange) {
        onChange(fileObjects.map(function(fileObject) {
          return fileObject.file;
        }));
      }
    };
    _this.loadInitialFiles = _asyncToGenerator(import_regenerator.default.mark(function _callee2() {
      var initialFiles, fileObjs;
      return import_regenerator.default.wrap(function _callee2$(_context2) {
        while (1)
          switch (_context2.prev = _context2.next) {
            case 0:
              initialFiles = _this.props.initialFiles;
              _context2.prev = 1;
              _context2.next = 4;
              return Promise.all(initialFiles.map(function() {
                var _ref2 = _asyncToGenerator(import_regenerator.default.mark(function _callee(initialFile) {
                  var file, data;
                  return import_regenerator.default.wrap(function _callee$(_context) {
                    while (1)
                      switch (_context.prev = _context.next) {
                        case 0:
                          if (!(typeof initialFile === "string")) {
                            _context.next = 6;
                            break;
                          }
                          _context.next = 3;
                          return createFileFromUrl(initialFile);
                        case 3:
                          file = _context.sent;
                          _context.next = 7;
                          break;
                        case 6:
                          file = initialFile;
                        case 7:
                          _context.next = 9;
                          return readFile(file);
                        case 9:
                          data = _context.sent;
                          return _context.abrupt("return", {
                            file,
                            data
                          });
                        case 11:
                        case "end":
                          return _context.stop();
                      }
                  }, _callee);
                }));
                return function(_x) {
                  return _ref2.apply(this, arguments);
                };
              }()));
            case 4:
              fileObjs = _context2.sent;
              _this.setState(function(state) {
                return {
                  fileObjects: [].concat(state.fileObjects, fileObjs)
                };
              }, _this.notifyFileChange);
              _context2.next = 11;
              break;
            case 8:
              _context2.prev = 8;
              _context2.t0 = _context2["catch"](1);
              console.log(_context2.t0);
            case 11:
            case "end":
              return _context2.stop();
          }
      }, _callee2, null, [[1, 8]]);
    }));
    _this.addFiles = function() {
      var _ref3 = _asyncToGenerator(import_regenerator.default.mark(function _callee3(newFileObjects) {
        var filesLimit;
        return import_regenerator.default.wrap(function _callee3$(_context3) {
          while (1)
            switch (_context3.prev = _context3.next) {
              case 0:
                filesLimit = _this.props.filesLimit;
                _this.setState(function(state) {
                  if (filesLimit <= 1) {
                    return {
                      fileObjects: [].concat(newFileObjects[0])
                    };
                  }
                  return {
                    fileObjects: [].concat(state.fileObjects, newFileObjects)
                  };
                }, _this.notifyFileChange);
              case 2:
              case "end":
                return _context3.stop();
            }
        }, _callee3);
      }));
      return function(_x2) {
        return _ref3.apply(this, arguments);
      };
    }();
    _this.deleteFile = function(removedFileObj, removedFileObjIdx) {
      event.stopPropagation();
      var onDelete = _this.props.onDelete;
      var fileObjects = _this.state.fileObjects;
      var remainingFileObjs = fileObjects.filter(function(fileObject, i) {
        return i !== removedFileObjIdx;
      });
      if (onDelete) {
        onDelete(removedFileObj.file);
      }
      _this.setState({
        fileObjects: remainingFileObjs
      }, _this.notifyFileChange);
    };
    _this.handleClose = function(evt) {
      var _this$props = _this.props, clearOnUnmount = _this$props.clearOnUnmount, onClose = _this$props.onClose;
      if (onClose) {
        onClose(evt);
      }
      if (clearOnUnmount) {
        _this.setState({
          fileObjects: []
        }, _this.notifyFileChange);
      }
    };
    _this.handleSave = function(evt) {
      var _this$props2 = _this.props, clearOnUnmount = _this$props2.clearOnUnmount, onSave = _this$props2.onSave;
      var fileObjects = _this.state.fileObjects;
      if (onSave) {
        onSave(fileObjects.map(function(fileObject) {
          return fileObject.file;
        }), evt);
      }
      if (clearOnUnmount) {
        _this.setState({
          fileObjects: []
        }, _this.notifyFileChange);
      }
    };
    return _this;
  }
  _createClass(DropzoneDialog2, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.loadInitialFiles();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var clearOnUnmount = this.props.clearOnUnmount;
      if (clearOnUnmount) {
        this.setState({
          fileObjects: []
        }, this.notifyFileChange);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var fileObjects = this.state.fileObjects;
      return (0, import_react2.createElement)(DropzoneDialogBase, _extends({}, this.props, {
        fileObjects,
        onAdd: this.addFiles,
        onDelete: this.deleteFile,
        onClose: this.handleClose,
        onSave: this.handleSave
      }));
    }
  }]);
  return DropzoneDialog2;
}(import_react2.PureComponent);
DropzoneDialog.defaultProps = {
  clearOnUnmount: true,
  filesLimit: 3,
  initialFiles: []
};
true ? DropzoneDialog.propTypes = _extends({}, DropzoneDialogBase.propTypes, {
  /** Clear uploaded files when component is unmounted. */
  clearOnUnmount: import_prop_types2.default.bool,
  /** Maximum number of files that can be loaded into the dropzone. */
  filesLimit: import_prop_types2.default.number,
  /** List containing File objects or URL strings.<br/>
   * **Note:** Please take care of CORS.
  */
  initialFiles: import_prop_types2.default.arrayOf(import_prop_types2.default.oneOfType([import_prop_types2.default.string, import_prop_types2.default.any])),
  /**
   * Fired when the user clicks the Submit button.
   *
   * @param {File[]} files All the files currently inside the Dropzone.
   * @param {SyntheticEvent} event The react `SyntheticEvent`.
   */
  onSave: import_prop_types2.default.func
}) : void 0;
export {
  DropzoneArea,
  DropzoneAreaBase$1 as DropzoneAreaBase,
  DropzoneDialog,
  DropzoneDialogBase
};
/*! Bundled license information:

@babel/runtime/helpers/regeneratorRuntime.js:
  (*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE *)
*/
//# sourceMappingURL=react-mui-dropzone.js.map
