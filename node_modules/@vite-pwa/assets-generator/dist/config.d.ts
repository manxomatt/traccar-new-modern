import { LoadConfigSource, LoadConfigResult } from 'unconfig';
export { LoadConfigResult, LoadConfigSource } from 'unconfig';
import { P as Preset } from './minimal-c39a53c9.js';
export { m as minimalPreset } from './minimal-c39a53c9.js';
import { e as AppleDeviceSize, g as AppleTouchStartupImageOptions, f as AppleSplashScreenName, h as AppleSplashScreens, L as LogLevel } from './types-84bc5ad4.js';
export { d as Asset, A as AssetSize, i as AssetType, k as Assets, B as BuildOptions, F as Favicon, b as ResolvedAppleSplashScreens, j as ResolvedAsset, c as ResolvedAssetSize, a as ResolvedAssets, R as ResolvedBuildOptions } from './types-84bc5ad4.js';
import { ResizeOptions, PngOptions } from 'sharp';
export { d as defaultAssetName, a as defaultPngCompressionOptions, b as defaultPngOptions } from './utils-e1795cff.js';

type AppleDeviceName = 'iPad Pro 12.9"' | 'iPad Pro 11"' | 'iPad Pro 10.5"' | 'iPad Pro 9.7"' | 'iPad mini 7.9"' | 'iPad Air 10.5"' | 'iPad Air 9.7"' | 'iPad 10.2"' | 'iPad 9.7"' | 'iPhone 14 Pro Max' | 'iPhone 14 Pro' | 'iPhone 14 Plus' | 'iPhone 14' | 'iPhone 13 Pro Max' | 'iPhone 13 Pro' | 'iPhone 13' | 'iPhone 13 mini' | 'iPhone 12 Pro Max' | 'iPhone 12 Pro' | 'iPhone 12' | 'iPhone 12 mini' | 'iPhone 11 Pro Max' | 'iPhone 11 Pro' | 'iPhone 11' | 'iPhone XS Max' | 'iPhone XS' | 'iPhone XR' | 'iPhone X' | 'iPhone 8 Plus' | 'iPhone 8' | 'iPhone 7 Plus' | 'iPhone 7' | 'iPhone 6s Plus' | 'iPhone 6s' | 'iPhone 6 Plus' | 'iPhone 6' | 'iPhone SE 4.7"' | 'iPhone SE 4"' | 'iPod touch 5th generation and later';
interface AppleSplashScreen extends Record<AppleDeviceName, AppleDeviceSize> {
}
declare const appleSplashScreenSizes: AppleSplashScreen;
declare function defaultSplashScreenName(landscape: boolean, size: AppleDeviceSize, dark?: boolean): string;
declare const AllAppleDeviceNames: AppleDeviceName[];
declare function createAppleSplashScreens(options?: {
    padding?: number;
    resizeOptions?: ResizeOptions;
    darkResizeOptions?: ResizeOptions;
    linkMediaOptions?: AppleTouchStartupImageOptions;
    png?: PngOptions;
    name?: AppleSplashScreenName;
}, devices?: AppleDeviceName[]): AppleSplashScreens;
declare function combinePresetAndAppleSplashScreens(preset: Preset, options?: {
    padding?: number;
    resizeOptions?: ResizeOptions;
    darkResizeOptions?: ResizeOptions;
    linkMediaOptions?: AppleTouchStartupImageOptions;
    png?: PngOptions;
    name?: AppleSplashScreenName;
}, devices?: AppleDeviceName[]): Preset;
declare function createAppleSplashScreenHtmlLink(size: AppleDeviceSize, landscape: boolean, addMediaScreen: boolean, xhtml: boolean, name?: AppleSplashScreenName, basePath?: string, dark?: boolean): string;

/**
 * Built-in presets.
 * - `minimal`: Only generate the bare minimum assets.
 * - `android`: Generate assets for Android.
 * - `windows`: Generate assets for Windows.
 * - `ios`: Generate assets for iOS.
 * - `all`: `android`, `windows` and `ios` presets combined.
 */
type BuiltInPreset = 'minimal' | 'android' | 'windows' | 'ios' | 'all';
interface UserConfig {
    /**
     * Project root directory. Can be an absolute path, or a path relative from
     * the location of the config file itself.
     * @default process.cwd()
     */
    root?: string;
    /**
     * Path to the config file.
     *
     * Default resolving to `pwa-assets.config.[js|mjs|cjs]`
     *
     * Setting to `false` will disable config resolving.
     */
    config?: string | false;
    /**
     * Override assets?
     *
     * @default true
     */
    overrideAssets?: boolean;
    /**
     * Log level.
     *
     * @default 'info'
     */
    logLevel?: LogLevel;
    /**
     * Path relative to `root` where to find the images to use for generating PWA assets.
     *
     * PWA Assets will be generated in the same directory.
     */
    images?: string | string[];
    /**
     * Preset to use.
     *
     * @default 'minimal'
     */
    preset?: BuiltInPreset | Preset;
}
interface ResolvedConfig extends Required<Omit<UserConfig, 'preset'>> {
    preset: Preset;
}
declare function defineConfig(config: UserConfig): UserConfig;
declare function loadConfig<U extends UserConfig>(cwd?: string, configOrPath?: string | U, extraConfigSources?: LoadConfigSource[], defaults?: UserConfig): Promise<LoadConfigResult<U>>;

export { AllAppleDeviceNames, AppleDeviceName, AppleDeviceSize, AppleSplashScreen, AppleSplashScreenName, AppleSplashScreens, AppleTouchStartupImageOptions, BuiltInPreset, LogLevel, Preset, ResolvedConfig, UserConfig, appleSplashScreenSizes, combinePresetAndAppleSplashScreens, createAppleSplashScreenHtmlLink, createAppleSplashScreens, defaultSplashScreenName, defineConfig, loadConfig };
